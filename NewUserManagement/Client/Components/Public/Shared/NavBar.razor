@using System.Net.Http.Headers
@using System.IdentityModel.Tokens.Jwt
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Authentication
@using System.Security;
@using System.IdentityModel.Tokens;
@using Microsoft.AspNetCore.Components.Authorization
@using NewUserManagement.Shared.Models
@using System.Security.Claims


<nav class="container navbar navbar-expand-lg navbar-dark justify-content-between fixed-top" style="z-index: 2;">



	<button class="navbar-toggler navbar-dark mx-1" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle Navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
		<ul class="nav">
				<li class="nav-item">
						<a href="@HomePageUri" role="button" class="nav-link @(IsPageActive(HomePageUri) ? "active" : string.Empty)">
                Home
            </a>
        </li>
				<li class="nav-item">
						<a href="@ListUri" role="button" class="nav-link @(IsPageActive(ListUri) ? "active" : string.Empty)">
                List
            </a>
        </li>
				<li class="nav-item">
						<a href="@LogsUri" role="button" class="nav-link @(IsPageActive(LogsUri) ? "active" : string.Empty)">
						Logs
						</a>
				</li>
				<li class="nav-item">
						<a href="@ExerciseUri" role="button" class="nav-link @(IsPageActive(ExerciseUri) ? "active" : string.Empty)">
						Exercise
						</a>
				</li>
		</ul>
		<div class="nav ms-auto m-3">
			<ul class="nav ">
			<AuthorizeView Roles="Admin">
				<Authorized >
					<li class="p-2">
							<span class="p-2">Welcome, @context.User.FindFirstValue("Forename")!</span>
						</li>
				<li class="nav-item">
							<a class="nav-link" role="button" @onclick="SignOut">Log out</a>
				</li>
				</Authorized>
				<NotAuthorized>
				<li class="nav-item">
					<a href="@SignInUri" role="button" class="nav-link @(IsPageActive(SignInUri) ? "active" : string.Empty)">
						Sign In
					</a>
				</li>
				</NotAuthorized>
			</AuthorizeView>
		</ul>
		</div>
	</div>

</nav>
<div class="d-flex p-2 justify-content-center fixed-top bg-dark pb-4" style="z-index: 1;  border-bottom: aliceblue 1px solid;">
	<h3>User Management</h3>
</div>
@code
{
	[Inject] NavigationManager Navigation { get; set; }
	[Inject] AppAuthStateProvider AuthStateProvider { get; set; }
	[Inject] HttpClient HttpClient { get; set; }
	[Inject] AppAuthStateProvider AuthenticationStateProvider { get; set; }
	[Inject] ILocalStorageService LocalStorageService { get; set; }
	[Parameter] public AppUser userDetails { get; set;}

	@inject InMemoryDatabaseCache DatabaseCache

	private AppUser _user { get; set; }
	private string Username { get; set; }
	private string token { get; set; }
	
	private async Task SignOut()
	{
		var authState = await AuthStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity.IsAuthenticated)
		{
			// Clear authentication state
			((AppAuthStateProvider)AuthenticationStateProvider).SignOut();

			// Remove token from local storage
			await LocalStorageService.RemoveItemAsync("bearerToken");

			// Clear authorization header
			HttpClient.DefaultRequestHeaders.Authorization = null;

			// Navigate to home page
			Navigation.NavigateTo("/", forceLoad: true);
		}
	}


	private async Task<bool> SignInWithBrowserLocalStorageBearerToken()
	{
		if (await LocalStorageService.ContainKeyAsync("bearerToken"))
		{
			string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

			await ((AppAuthStateProvider)AuthenticationStateProvider).SignIn();

			HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

			StateHasChanged();

			return true; // Sign-in successful
		}
		else
		{
			return false; // Sign-in unsuccessful
		}
	}

	
	private const string HomePageUri = "/";
	private const string ListUri = "/list";
	private const string LogsUri = "/logs";
	private const string ExerciseUri = "/exercise";
	private const string SignInUri = "/login";


	private bool IsPageActive(string pageToCheckUri)
	{
		//Skip(3) to bypass the Https://domainname/
		string[] currentUriSplitBetweenSlashes = Navigation.Uri.Split('/').Skip(3).ToArray();

		if (pageToCheckUri == HomePageUri)
		{
			if (currentUriSplitBetweenSlashes.Last().Length == 0)
			{
				return true;
			}
		}
		else
		{
			string[] pageToCheckUriSplitBetweenSlashes = pageToCheckUri.Split('/').Skip(1).ToArray();

			foreach (string currentUriPart in currentUriSplitBetweenSlashes)
			{
				foreach (string pageToCheckUriPart in pageToCheckUriSplitBetweenSlashes)
				{
					if (pageToCheckUriPart == currentUriPart)
					{
						return true;
					}
				}
			}

		}
		// If the code reaches here pageToCheckUri is not the active page, so return False
		return false;
	}

}
