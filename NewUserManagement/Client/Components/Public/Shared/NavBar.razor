@using System.Net.Http.Headers
@using System.IdentityModel.Tokens.Jwt
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Authentication
@using System.Security;
@using System.IdentityModel.Tokens;
@using Microsoft.AspNetCore.Components.Authorization





<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <a href="/" class="navbar-brand md-f-size-1-5 text-light ps-2 m-0 mx-lg-5 fn-bold">
		User Management
    </a>


	<button class="navbar-toggler navbar-dark mx-1" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle Navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
		<ul class="nav">
						<li class="nav-item">
				<a href="@HomePageUri" role="button" class="btn nav-link @(IsPageActive(HomePageUri) ? "active" : string.Empty)">
                    Home
                </a>
            </li>
						<li class="nav-item">
				<a href="@ListUri" role="button" class="btn nav-link @(IsPageActive(ListUri) ? "active" : string.Empty)">
                    List
                </a>
            </li>
						<li class="nav-item">
				<a href="@LogsUri" role="button" class="btn nav-link @(IsPageActive(LogsUri) ? "active" : string.Empty)">
								Logs
						</a>
			</li>
		</ul>


		<ul class="navbar-nav d-flex justify-content-end">
			<AuthorizeView Roles="Admin">
				<Authorized Context="Auth">
					<li class="nav-item">
					<span class="nav-link">Welcome @Username</span>
				</li>
				<li class="nav-item">
					<button class="btn btn-link nav-link" @onclick="SignOut">Log out</button>
				</li>
				</Authorized>
				<NotAuthorized>
				<li class="nav-item">
					<a href="@SignInUri" role="button" class="nav-link @(IsPageActive(SignInUri) ? "active" : string.Empty)">
						Sign In
					</a>
				</li>
				</NotAuthorized>
			</AuthorizeView>
		</ul>
    </div>
</nav>

@code
{
	@inject HttpClient HttpClient 
	@inject AppAuthStateProvider AuthenticationStateProvider
	@inject ILocalStorageService LocalStorageService
	private bool IsAuthenticated { get; set; }
	private string? Username { get; set; }
	private string? token { get; set; }
	private async Task SignInWithBrowserLocalStorageBearerToken()
	{
		if (await LocalStorageService.ContainKeyAsync("bearerToken"))
		{
			string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

			await ((AppAuthStateProvider)AuthenticationStateProvider).SignIn();

			HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

			StateHasChanged();

		}
	}


	[Inject] public NavigationManager NavigationManager { get; set; } = default!;

	private const string HomePageUri = "/";
  private const string ListUri = "/list";
	private const string LogsUri = "/logs";
	private const string SignInUri = "/login";


	private bool IsPageActive(string pageToCheckUri)
	{
		//Skip(3) to bypass the Https://domainname/
		string[] currentUriSplitBetweenSlashes = NavigationManager.Uri.Split('/').Skip(3).ToArray();

		if (pageToCheckUri == HomePageUri)
		{
			if (currentUriSplitBetweenSlashes.Last().Length == 0)
			{
				return true;
			}
		}
		else
		{
			string[] pageToCheckUriSplitBetweenSlashes = pageToCheckUri.Split('/').Skip(1).ToArray();

			foreach (string currentUriPart in currentUriSplitBetweenSlashes)
			{
				foreach (string pageToCheckUriPart in pageToCheckUriSplitBetweenSlashes)
				{
					if (pageToCheckUriPart == currentUriPart)
					{
						return true;
					}
				}
			}

		}
		// If the code reaches here pageToCheckUri is not the active page, so return False
		return false;
	}
	private async Task SignOut()
	{
		if (await LocalStorageService.ContainKeyAsync("bearerToken"))
		{
			await LocalStorageService.RemoveItemAsync("bearerToken");

			((AppAuthStateProvider)AuthenticationStateProvider).SignOut();

			StateHasChanged();
		}
	}

	public bool IsTokenValid(string token)
	{
		JwtSecurityToken jwtToken = null!; // Initialize jwtToken variable

		try
		{
			var jwtHandler = new JwtSecurityTokenHandler();

			// Check if the token can be read and parse it
			if (jwtHandler.CanReadToken(token) && jwtHandler.ReadToken(token) is JwtSecurityToken parsedToken)
			{
				jwtToken = parsedToken; // Assign value to jwtToken
			}

			// Check if jwtToken is null or the token is expired
			if (jwtToken == null || jwtToken.ValidTo < DateTime.UtcNow)
			{
				// Token format is invalid or token has expired
				Console.WriteLine("Token is invalid or expired.");
				return false;
			}

			// Token is valid
			Console.WriteLine("Token is valid.");
			return true;
		}
		catch (Exception ex)
		{
			// Other exceptions occurred while validating token
			Console.WriteLine($"An error occurred while validating token: {ex.Message}");
			return false;
		}
	}




}
