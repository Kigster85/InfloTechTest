@using System.Net.Http.Headers;




<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <a href="/" class="navbar-brand md-f-size-1-5 text-light ps-2 m-0 mx-lg-5 fn-bold">
		User Management
    </a>


	<button class="navbar-toggler navbar-dark mx-1" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle Navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
		<ul class="nav">
						<li class="nav-item">
								<a href="@HomePageUri" role="button" class="nav-link mx-5 md-and-smaller-my-3 @(IsPageActive(HomePageUri) ? "active" : string.Empty)">
                    Home
                </a>
            </li>
						<li class="nav-item">
                <a href="@ListUri" role="button" class="nav-link mx-5 md-and-smaller-my-3 @(IsPageActive(ListUri) ? "active" : string.Empty)">
                    List
                </a>
            </li>
						<li class="nav-item">
				<a href="@LogsUri" role="button" class="nav-link mx-5 md-and-smaller-my-3 @(IsPageActive(LogsUri) ? "active" : string.Empty)">
								Logs
						</a>
						</li>
						<li class="nav-item">
				<a href="@SignInUri" role="button" class="nav-link mx-5 md-and-smaller-my-3 @(IsPageActive(SignInUri) ? "active" : string.Empty)">
                    Sign In
                </a>
            </li>

            
        </ul>

    </div>
</nav>

@code
{

	// Public and CamelCase because C# properties are methods.
	[Inject] public NavigationManager NavigationManager { get; set; } = default!;

	private const string HomePageUri = "/";
  private const string ListUri = "/list";
	private const string LogsUri = "/Logs";
	private const string SignInUri = "/login";


	private bool IsPageActive(string pageToCheckUri)
	{
		// Skip(3) to remove https://domainname/
		string[] currentUriSplitBetweenSlashes = NavigationManager.Uri.Split('/').Skip(3).ToArray();

		if (pageToCheckUri == HomePageUri)
		{
			if (currentUriSplitBetweenSlashes.Last().Length == 0)
			{
				return true;
			}
		}
		else
		{
			string[] pageToCheckUriSplitBetweenSlashes = pageToCheckUri.Split('/').Skip(1).ToArray();

			foreach (string currentUriPart in currentUriSplitBetweenSlashes)
			{
				foreach (string pageToCheckUriPart in pageToCheckUriSplitBetweenSlashes)
				{
					if (pageToCheckUriPart == currentUriPart)
					{
						return true;
					}
				}
			}
		}

		// If the code gets here pageToCheckUri is not the active page. So return false.
		return false;
	}
}
