@page "/list/view/{UserId:int}"
@using NewUserManagement.Client.Services
@using static NewUserManagement.Client.Services.LoggingClientService
@using NewUserManagement.Client.Components
@using NewUserManagement.Shared.Models
@using NewUserManagement.Client.Components.Public
@using NewUserManagement.Client.Components.Public.List
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Identity;
@using NewUserManagement.Shared.Utilities



<div class="modal @(_modalClass)" id="informationalModal" tabindex="-1" aria-labelledby="informationalModalLabel" role="dialog" style="display:@_modalDisplay">
	<div class="modal-dialog " role="document">
		<div class="modal-content bg-dark ">
			<div class="modal-header">
				<h5 class="modal-title">View User Details</h5>
				<button @onclick="CloseViewModal" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>

			<div class="modal-body">
				<div class="d-flex justify-content-end p-2">
				<strong>Id:</strong><span> @UserDetails.Id</span>
				</div>
				<UserForm UserDetails="@UserDetails" ShowInputFields = "false" />
			</div>
			<div class="modal-footer">
@* 				<button @onclick="() => EditUser(UserId)" class="btn dropdown-item">Edit</button>
 *@				<button @onclick="PreviousUser" type="button" class="btn btn-primary shadow">Previous</button>
				<button @onclick="NextUser" type="button" class="btn btn-primary shadow">Next</button>
				<button @onclick="CloseViewModal" type="button" class="btn btn-primary shadow" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>
@if (_showBackdrop == true)
{
	<div class="modal-backdrop fade show"></div>
}
@code {
	@inject InMemoryDatabaseCache DatabaseCache
	@inject NavigationManager NavigationManager
	@inject IJSRuntime JSRuntime
	@inject ILogger<View> Logger // Inject ILogger service
	@inject LoggingClientService.ILogService _logService

	[Parameter] public string userId { get; set; }

	private List<AppUserDTO> Users = new List<AppUserDTO>();
	private string _selectedUserId { get; set; }

	private AppUserDTO UserDetails { get; set; } // Initialize with a default user object
	protected async override Task OnInitializedAsync()
	{
		try
		{
			// Check if the userId parameter is not null
			if (!string.IsNullOrEmpty(userId))
			{
				// Find the user in the cache by userId
				if (DatabaseCache.Users != null)
				{
					var user = DatabaseCache.Users.FirstOrDefault(u => u.Id == userId);
					if (user != null)
					{
						UserDetails = user;
						Console.WriteLine($"Viewing user with ID: {userId}");
					}
					else
					{
						Logger.LogWarning($"User with ID {userId} not found in the cache.");
					}
				}
			}
			else
			{
				Logger.LogWarning("Attempted to log user view with null userId.");
			}
		}
		catch (Exception ex)
		{
			// Handle the error, such as logging or displaying an error message
			Console.WriteLine($"An error occurred while initializing: {ex.Message}");
		}
		await Task.CompletedTask; // Ensure the method is asynchronous
	}

	private async Task LogUserView(string? userId)
	{
		if (!string.IsNullOrEmpty(userId))
		{
			try
			{
				// Log the user view event with user ID
				Logger.LogInformation($"User viewed: UserID = {userId}");

				// Increment the view count for the user
				await DatabaseCache.IncrementUserViewCount(userId);

				// Get the view count for the user
				int viewCount = DatabaseCache.GetUserViewCount(userId);

				// Log the view count for the user
				Logger.LogInformation($"View count for user {userId}: {viewCount}");

				// Create a log entry for the user view event
				var logEntry = new LogEntry
					{
						Timestamp = DateTime.UtcNow,
						UserId = userId,
						Action = "Viewed",
						Details = $"User with ID {userId} viewed",
						ViewCount = viewCount,
						EditCount = 0 // Assuming edit count is not applicable for view events
					};

				// Add the log entry to the log service
				await _logService.AddLogEntryAsync(logEntry);
			}
			catch (Exception ex)
			{
				// Handle or log any exceptions that occur during view count increment or logging
				Logger.LogError(ex, "Error occurred while logging user view event: {ErrorMessage}", ex.Message);
				// Optionally, rethrow the exception if you need to propagate it to the caller
				throw;
			}
		}
		else
		{
			// Handle the case where userId is null or empty
			Logger.LogWarning("Attempted to log user view with null or empty userId.");
		}
	}




	private async Task NextUser()
{
    int index = DatabaseCache.Users.FindIndex(u => u.Id == UserDetails.Id);
    if (index != -1)
    {
        index++; // Move to the next user

        if (index >= DatabaseCache.Users.Count)
        {
            index = 0; // Wrap around to the first user if reached the end
        }

        // Get the next user from the cached data
        AppUserDTO userDetailsDTO = DatabaseCache.Users[index];

        // Check if userDetailsDTO is not null before proceeding
        if (userDetailsDTO != null)
        {
            UserDetails = userDetailsDTO;

            // Log the view action for the current user
            await LogUserView(UserDetails.Id.ToString());

            // Update the URL without navigation
            await UpdateUrlWithoutNavigation("view", UserDetails.Id.ToString());
        }
        else
        {
            // Handle the case where userDetailsDTO is null
            Console.WriteLine("UserDetailsDTO is null.");
        }
    }
}

private async Task PreviousUser()
{
    int index = DatabaseCache.Users.FindIndex(u => u.Id == UserDetails.Id);
    if (index != -1)
    {
        index--; // Move to the previous user

        if (index < 0)
        {
            index = DatabaseCache.Users.Count - 1; // Wrap around to the last user if reached the beginning
        }

        // Get the previous user from the cached data
        AppUserDTO userDetailsDTO = DatabaseCache.Users[index];

        // Check if userDetailsDTO is not null before proceeding
        if (userDetailsDTO != null)
        {
            UserDetails = userDetailsDTO;

            // Log the view action for the current user
            await LogUserView(UserDetails.Id.ToString());

            // Update the URL without navigation
            await UpdateUrlWithoutNavigation("view", UserDetails.Id.ToString());
        }
        else
        {
            // Handle the case where userDetailsDTO is null
            Console.WriteLine("UserDetailsDTO is null.");
        }
    }
}
	[Parameter] public EventCallback ViewModalClickBtnClose { get; set; }
	[Parameter] public EventCallback OpenEditUser { get; set; }
	private bool ShowInputFields { get; set; }
	private string? _modalDisplay = null;
	private string? _modalClass = null;
	private bool _showBackdrop = false;
	protected override void OnInitialized() => ShowViewModal();

	private async void ShowViewModal()
	{
		_modalDisplay = "block;";
		_modalClass = "show";
		_showBackdrop = true;
		ShowInputFields = false;
		await Task.Delay(0);
	}

	private async void CloseViewModal()
	{
		_modalDisplay = "none;";
		_modalClass = string.Empty;
		_showBackdrop = false;
		ShowInputFields = true;
		await ViewModalClickBtnClose.InvokeAsync();
		NavigationManager.NavigateTo("/list");
	}
	private async Task UpdateUrlWithoutNavigation(string route, string userId)
	{
		string url = $"/list/{route}/{userId}";
		await JSRuntime.InvokeVoidAsync("updateUrlWithoutNavigation", route, userId);

	}



}
