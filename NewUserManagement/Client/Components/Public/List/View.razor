@page "/list/view/{UserId}"
@using NewUserManagement.Shared.Models
@using System.Net.Http.Json
@using System.Net.Http
@inject NavigationManager NavigationManager


<div class="modal @_modalClass" id="informationalModal" tabindex="-1" aria-labelledby="informationalModalLabel" role="dialog" style="display:@_modalDisplay">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">View User Details</h5>
				<button @onclick="CloseModal" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				@if (UserDetails != null)
				{
					<div>
						<p><strong>Id:</strong> @UserDetails.Id</p>
						<p><strong>Forename:</strong> @UserDetails.Forename</p>
						<p><strong>Surname:</strong> @UserDetails.Surname</p>
						<p><strong>Email:</strong> @UserDetails.Email</p>
						<p><strong>Active:</strong> @(UserDetails.IsActive ? "Yes" : "No")</p>
						<p><strong>Date of Birth:</strong> @UserDetails.DateOfBirth.ToShortDateString()</p>
					</div>
				}
				else
				{
					<p>Loading user details...</p>
				}
			</div>
			<div class="modal-footer">
				<button @onclick="PreviousUser" type="button" class="btn btn-primary btn-lg shadow">Previous</button>
				<button @onclick="NextUser" type="button" class="btn btn-primary btn-lg shadow">Next</button>
				<button @onclick="CloseModal" type="button" class="btn btn-primary btn-lg shadow" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>
@if (_showBackdrop == true)
{
	<div class="modal-backdrop fade show"></div>
}
@code {

	private List<User> _users = new List<User>();
	private int _currentIndex;
	// Define the UserDetailId property
	[Parameter] public int? UserDetailId { get; set; }

	// Define properties and event callback for the modal
	[Parameter] public User? UserDetails { get; set; }

	// Close modal method

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync(); // Ensure the base initialization is awaited
		var uri = new Uri(NavigationManager.Uri);
		if (uri.Segments.Length >= 3 && int.TryParse(uri.Segments[2], out int userId))
		{
			// Find user details by ID
			UserDetails = _users.FirstOrDefault(u => u.Id == userId) ?? new User();
			// Provide a default User instance if no matching user is found
			// Find index of current user in the list
			_currentIndex = _users.IndexOf(UserDetails);
		}
		else
		{
			// Handle invalid URL parameter
			Console.WriteLine("Invalid URL parameter.");
			// Redirect or display error message to the user
		}
	}

	private void NextUser()
	{
		_currentIndex++;
		if (_currentIndex >= _users.Count)
		{
			_currentIndex = 0; // Wrap around to the first user if reached the end
		}
		UserDetails = _users[_currentIndex];
	}

	private void PreviousUser()
	{
		_currentIndex--;
		if (_currentIndex < 0)
		{
			_currentIndex = _users.Count - 1; // Wrap around to the last user if reached the beginning
		}
		UserDetails = _users[_currentIndex];
	}

	[Parameter] public EventCallback ParentMethodToCallOnClickBtnClose { get; set; }
	private string? _modalDisplay = null;
	private string? _modalClass = null;
	private bool _showBackdrop = false;

	protected override void OnInitialized() => ShowModal();

	private void ShowModal()
	{
		_modalDisplay = "block;";
		_modalClass = "show";
		_showBackdrop = true;
	}

	private void CloseModal()
	{
		_modalDisplay = "none;";
		_modalClass = string.Empty;
		_showBackdrop = false;
		ParentMethodToCallOnClickBtnClose.InvokeAsync();
	}
}
