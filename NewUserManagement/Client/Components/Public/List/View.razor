@page "/list/view/{UserId}"
@using NewUserManagement.Shared.Models
@using System.Net.Http.Json
@using System.Net.Http
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="modal @_modalClass" id="informationalModal" tabindex="-1" aria-labelledby="informationalModalLabel" role="dialog" style="display:@_modalDisplay">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">View User Details</h5>
				<button @onclick="CloseModal" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				@if (UserDetails != null)
				{
					<div>
						<p><strong>Id:</strong> @UserDetails.Id</p>
						<p><strong>Forename:</strong> @UserDetails.Forename</p>
						<p><strong>Surname:</strong> @UserDetails.Surname</p>
						<p><strong>Email:</strong> @UserDetails.Email</p>
						<p><strong>Active:</strong> @(UserDetails.IsActive ? "Yes" : "No")</p>
						<p><strong>Date of Birth:</strong> @UserDetails.DateOfBirth.ToShortDateString()</p>
					</div>
				}
				else
				{
					<p>Loading user details...</p>
				}
			</div>
			<div class="modal-footer">
				<button @onclick="PreviousUser" type="button" class="btn btn-primary btn-lg shadow">Previous</button>
				<button @onclick="NextUser" type="button" class="btn btn-primary btn-lg shadow">Next</button>
				<button @onclick="CloseModal" type="button" class="btn btn-primary btn-lg shadow" data-bs-dismiss="modal">Close</button>
			</div>

		</div>
	</div>
</div>

@code {

	private string _modalDisplay = "none"; // Initialize modal display property
	private string _modalClass = "";
	private User? UserDetails;
	private List<int> _userIds = new List<int>();
	private int _currentIndex = 0;
	[Parameter] public int UserDetailId { get; set; } // Add UserDetailId property
	[Parameter] public bool ShowModal { get; set; } // Add ShowModal property
	[Parameter] public EventCallback OnCloseModal { get; set; } // Add OnCloseModal event
	protected override async Task OnParametersSetAsync()
	{
		// Update modal display properties based on ShowModal parameter
		if (ShowModal)
		{
			_modalDisplay = "block";
			_modalClass = "show";
			await LoadUserIds();
			_currentIndex = _userIds.IndexOf(UserDetailId);
			await LoadUserDetails(UserDetailId);
		}
		else
		{
			_modalDisplay = "none";
			_modalClass = string.Empty;
		}
	}
	private async Task LoadUserIds()
	{
		try
		{
			var userIdsResponse = await HttpClient.GetFromJsonAsync<List<int>>($"api/User/Ids");
			Console.WriteLine("Making call to server for UserID");
			if (userIdsResponse != null)
			{
				_userIds = userIdsResponse;
			}
			else
			{
				Console.WriteLine("User IDs response is null.");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading user ids: {ex.Message}");
		}

	}
	private async Task LoadUserDetails(int userId)
	{
		try
		{
			UserDetails = await HttpClient.GetFromJsonAsync<User>($"api/User/{userId}");
			if (UserDetails == null)
			{
				Console.WriteLine($"No user details found for user ID: {userId}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading user details: {ex.Message}");
		}
	}
	private async Task NextUser()
{
    if (_userIds == null || _userIds.Count == 0)
    {
        return; // No users to display
    }

    _currentIndex++;
    if (_currentIndex >= _userIds.Count)
    {
        _currentIndex = 0; // Wrap around to the beginning if reached the end
    }
    await LoadUserDetails(_userIds[_currentIndex]);
}

private async Task PreviousUser()
{
    if (_userIds == null || _userIds.Count == 0)
    {
        return; // No users to display
    }

    _currentIndex--;
    if (_currentIndex < 0)
    {
        _currentIndex = _userIds.Count - 1; // Wrap around to the end if reached the beginning
    }
    await LoadUserDetails(_userIds[_currentIndex]);
}


	private void CloseModal()
	{
		_modalDisplay = "none;";
		_modalClass = string.Empty;
		OnCloseModal.InvokeAsync();
	}
}
