@page "/list/add/{UserId:int}"
@using NewUserManagement.Client.Services
@using NewUserManagement.Client.Components
@using NewUserManagement.Shared.Models
@using NewUserManagement.Client.Components.Public
@using Microsoft.JSInterop
@using System.ComponentModel.DataAnnotations


<div class="modal @_modalClass" id="informationalModal" tabindex="-1" aria-labelledby="informationalModalLabel" role="dialog" style="display:@_modalDisplay">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Add User</h5>
				<button @onclick="CloseAddModal" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<UserForm OnSubmit="@AddUserSubmit" />@* OnSuccess="@ShowSuccessMsg" OnFailure="@ShowFailureMsg" *@


			</div>
			<div class="modal-footer">
				<button @onclick="CloseAddModal" type="button" class="btn btn-primary shadow" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>
@if (_showBackdrop == true)
{
	<div class="modal-backdrop fade show"></div>
}
@code {
	@inject InMemoryDatabaseCache DatabaseCache
	@inject NavigationManager NavigationManager
	@inject IJSRuntime JSRuntime
	@inject HttpClient HttpClient

	[Parameter] public int UserId { get; set; }
	private List<User> users = new List<User>();

	private int _selectedUserId { get; set; }
	private User UserDetails { get; set; } = new User(); // Initialize with a default user object
	protected override async Task OnInitializedAsync()
	{
		// Fetch user details based on the UserId parameter
		UserDetails = await DatabaseCache.GetUserDetails(UserId) ?? new User();

	}


	private async void NextUser()
	{
		int index = DatabaseCache.Users.FindIndex(u => u.Id == UserDetails.Id);
		if (index != -1)
		{
			index++; // Move to the next user

			if (index >= DatabaseCache.Users.Count)
			{
				index = 0; // Wrap around to the first user if reached the end
			}
			UserDetails = DatabaseCache.Users[index];
			await updateUrlWithoutNavigation("edit", UserDetails.Id);
		}
	}

	private async void PreviousUser()
	{
		int index = DatabaseCache.Users.FindIndex(u => u.Id == UserDetails.Id);
		if (index != -1)
		{
			index--; // Move to the previous user

			if (index < 0)
			{
				index = DatabaseCache.Users.Count - 1; // Wrap around to the last user if reached the beginning
			}
			UserDetails = DatabaseCache.Users[index];
			await updateUrlWithoutNavigation("edit", UserDetails.Id);
		}
	}
	[Parameter] public EventCallback AddModalClickBtnClose { get; set; }
	private string? _modalDisplay = null;
	private string? _modalClass = null;
	private bool _showBackdrop = false;
	protected override void OnInitialized() => ShowAddModal();

	private async void ShowAddModal()
	{
		_modalDisplay = "block;";
		_modalClass = "show";
		_showBackdrop = true;
		await updateUrlWithoutNavigation("edit", UserId);
	}
	[Parameter] public bool _showingAddModalWindow { get; set; }
	private async Task CloseAddModal()
	{
		_modalDisplay = "none;";
		_modalClass = string.Empty;
		_showBackdrop = false;
		await AddModalClickBtnClose.InvokeAsync();
		NavigationManager.NavigateTo("/list");
	}
	private async Task updateUrlWithoutNavigation(string route, int? UserId)
	{
		string url = $"/list/{route}/{UserId}";
		await JSRuntime.InvokeVoidAsync("updateUrlWithoutNavigation", route, UserId);

	}
	private async Task AddUserSubmit()
	{
		if (IsValidUser())
		{
			var response = await HttpClient.PostAsJsonAsync("/api/User", UserDetails);
			if (response.IsSuccessStatusCode)
			{
				Console.WriteLine("User added successfully!");
				await DatabaseCache.RefreshCache(HttpClient);
				// Consider showing a success message here
				await CloseAddModal();
			}
			else
			{
				Console.WriteLine("Failed to add user. Please try again.");
				// Consider showing an error message here
			}
		}
	}
	private bool IsValidUser()
	{
		var validationContext = new ValidationContext(UserDetails);
		var validationResults = new List<ValidationResult>();

		if (!Validator.TryValidateObject(UserDetails, validationContext, validationResults, true))
		{
			foreach (var validationResult in validationResults)
			{
				Console.WriteLine(validationResult.ErrorMessage);
			}
			return false;
		}

		return true;
	}
}
