@page "/list/add/{UserId:int}"
@using NewUserManagement.Client.Services
@using NewUserManagement.Client.Pages.Public
@using NewUserManagement.Client.Components
@using NewUserManagement.Shared.DTOs
@using NewUserManagement.Shared.Models
@using NewUserManagement.Client.Components.Public
@using Microsoft.JSInterop
@using System.ComponentModel.DataAnnotations


<div class="modal @_modalClass" id="informationalModal" tabindex="-1" aria-labelledby="informationalModalLabel" role="dialog" style="display:@_modalDisplay">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Add User</h5>
				<button @onclick="CloseAddModal" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<UserForm UserDetails="@UserDetails" OnSubmit="@AddUserSubmit" OnSuccess="@ShowSuccessMsg" OnFailure="@ShowFailureMsg" />

				@if (showSuccessMessage)
				{
					<div class="alert alert-success" role="alert">
						User details updated successfully!
					</div>
					Console.WriteLine("We have success but this doesn't show up on screen!'");
				}
				@if (showErrorMessage)
				{
					<div class="alert alert-danger" role="alert">
						Failed to update user details. Please try again.
					</div>
				}

			</div>
			<div class="modal-footer">
				<button @onclick="CloseAddModal" type="button" class="btn btn-primary shadow" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>
@if (_showBackdrop == true)
{
	<div class="modal-backdrop fade show"></div>
}
@code {
	@inject InMemoryDatabaseCache DatabaseCache
	@inject NavigationManager NavigationManager
	@inject IJSRuntime JSRuntime
	@inject HttpClient HttpClient
	public bool showSuccessMessage = false;
	public bool showErrorMessage = false;
	[Parameter] public int UserId { get; set; }

	private User? UserDetails { get; set; }
	protected override async Task OnInitializedAsync()
	{
		// You can add an asynchronous operation that doesn't await anything to satisfy the requirement.
		await Task.CompletedTask;
		isLoading = false;

		// Initialize UserDetails with default values or leave it as an empty object
		UserDetails = await DatabaseCache.GetUserDetails(UserId) ?? new User();
	}



	[Parameter] public EventCallback AddModalClickBtnClose { get; set; }
	private string? _modalDisplay = null;
	private string? _modalClass = null;
	private bool _showBackdrop = false;
	protected override void OnInitialized() => ShowAddModal();
	private bool? isLoading = true; // Flag to indicate loading state

	private async void ShowAddModal()
	{
		_modalDisplay = "block;";
		_modalClass = "show";
		_showBackdrop = true;
		await updateUrlWithoutNavigation("add", null);
	}
	[Parameter] public bool _showingAddModalWindow { get; set; }
	private async Task CloseAddModal()
	{
		_modalDisplay = "none;";
		_modalClass = string.Empty;
		_showBackdrop = false;
		await AddModalClickBtnClose.InvokeAsync();
		NavigationManager.NavigateTo("/list");
	}
	private async Task updateUrlWithoutNavigation(string route, int? UserId)
	{
		string url = $"/list/{route}/{UserId}";
		await JSRuntime.InvokeVoidAsync("updateUrlWithoutNavigation", route, UserId);

	}
	private async Task FetchAllUsers()
	{
		isLoading = true; // Set loading flag to true
		try
		{
			await DatabaseCache.GetUsersFromDatabaseAndCache(null);
		}
		catch (Exception)
		{
			Console.WriteLine("User Loading from database failed. Please try again or contact a system administrator if the problem persists.");
		}
		finally
		{
			isLoading = false; // Set loading flag to false when loading completes or fails
		}
	}
	[Parameter] public EventCallback OnAddModalClosed { get; set; }

	private async Task AddUserSubmit()
	{
		if (IsValidUser())
		{
			var user = new User
				{
					Forename = UserDetails?.Forename ?? "", // Check if UserDetails is null, if not, access Forename property; otherwise, use an empty string
					Surname = UserDetails?.Surname ?? "",   // Check if UserDetails is null, if not, access Surname property; otherwise, use an empty string
					Email = UserDetails?.Email ?? "",       // Check if UserDetails is null, if not, access Email property; otherwise, use an empty string
					DateOfBirth = UserDetails?.DateOfBirth ?? DateTime.MinValue // Check if UserDetails is null, if not, access DateOfBirth property; otherwise, use a default DateTime value
				};


			var response = await HttpClient.PostAsJsonAsync("/api/User", user);
			if (response.IsSuccessStatusCode)
			{
				Console.WriteLine("User added successfully!");
				ShowSuccessMsg();
				await DatabaseCache.RefreshCache(HttpClient);
				await CloseAddModal();
				await FetchAllUsers();
				await OnModalClosed.InvokeAsync();


			}
			else
			{
				Console.WriteLine("Failed to add user. Please try again.");
				ShowFailureMsg();
				// Handle the case where adding user fails (e.g., show an error message)
			}
		}
	}

	private bool IsValidUser()
	{
		if (UserDetails == null)
		{
			Console.WriteLine("UserDetails is null.");
			return false;
		}

		// Output UserDetails properties for debugging
		Console.WriteLine($"Forename value: {UserDetails.Forename}");
		Console.WriteLine($"Surname value: {UserDetails.Surname}");
		Console.WriteLine($"Email value: {UserDetails.Email}");
		Console.WriteLine($"DOB value: {UserDetails.DateOfBirth}");

		// Create ValidationContext only if UserDetails is not null
		var validationContext = new ValidationContext(UserDetails);

		var validationResults = new List<ValidationResult>();

		if (!Validator.TryValidateObject(UserDetails, validationContext, validationResults, true))
		{
			foreach (var validationResult in validationResults)
			{
				Console.WriteLine(validationResult.ErrorMessage);
			}
			return false;
		}

		return true;
	}
	private void ShowSuccessMsg()
	{
		showSuccessMessage = false;

	}

	private void ShowFailureMsg()
	{
		showErrorMessage = false;

	}

	[Parameter] public EventCallback OnModalClosed { get; set; }


}
