@page "/list/edit/{UserId:int}"
@using NewUserManagement.Client.Pages
@using NewUserManagement.Client.Services
@using NewUserManagement.Client.Components
@using NewUserManagement.Shared.Models
@using NewUserManagement.Client.Components.Public
@using Microsoft.JSInterop



<div class="modal @_modalClass" id="informationalModal" tabindex="-1" aria-labelledby="informationalModalLabel" role="dialog" style="display:@_modalDisplay">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Edit User Details</h5>
				<button @onclick="CloseEditModal" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<UserForm UserDetails="@UserDetails" OnSubmit="@SubmitForm" OnSuccess="@ShowSuccessMsg" OnFailure="@ShowFailureMsg" />

					@if (showErrorMessage)
					{
						<div class="alert alert-danger" role="alert">
							Failed to update user details. Please try again.
						</div>
					}
				

			</div>
			<div class="modal-footer">
				<button @onclick="PreviousUser" type="button" class="btn btn-primary shadow">Previous</button>
				<button @onclick="NextUser" type="button" class="btn btn-primary shadow">Next</button>
				<button @onclick="CloseEditModal" type="button" class="btn btn-primary shadow" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>
@if (_showBackdrop == true)
{
	<div class="modal-backdrop fade show"></div>
}
@code {
	@inject InMemoryDatabaseCache DatabaseCache
	@inject NavigationManager NavigationManager
	@inject IJSRuntime JSRuntime
	@inject HttpClient HttpClient
	public bool showSuccessMessage = false;
	public bool showErrorMessage = false;
	[Parameter] public int UserId { get; set; }
	private List<User> users = new List<User>();
	private string? _modalDisplay = null;
	private string? _modalClass = null;
	private bool _showBackdrop = false;
	private int _selectedUserId { get; set; }
	private User UserDetails { get; set; } = new User(); // Initialize with a default user object
	[Parameter] public EventCallback OnModalClosed { get; set; }
	[Parameter] public EventCallback OnEditModalClosed { get; set; }
	[Parameter] public EventCallback EditModalClickBtnClose { get; set; }

	protected override async Task OnInitializedAsync()
	{
		// Fetch user details based on the UserId parameter
		UserDetails = await DatabaseCache.GetUserDetails(UserId) ?? new User();
	}


	private async void NextUser()
	{
		int index = DatabaseCache.Users.FindIndex(u => u.Id == UserDetails.Id);
		if (index != -1)
		{
			index++; // Move to the next user

			if (index >= DatabaseCache.Users.Count)
			{
				index = 0; // Wrap around to the first user if reached the end
			}
			UserDetails = DatabaseCache.Users[index];
			await updateUrlWithoutNavigation("edit", UserDetails.Id);
		}
	}

	private async void PreviousUser()
	{
		int index = DatabaseCache.Users.FindIndex(u => u.Id == UserDetails.Id);
		if (index != -1)
		{
			index--; // Move to the previous user

			if (index < 0)
			{
				index = DatabaseCache.Users.Count - 1; // Wrap around to the last user if reached the beginning
			}
			UserDetails = DatabaseCache.Users[index];
			await updateUrlWithoutNavigation("edit", UserDetails.Id);
		}
	}
	protected override void OnInitialized() => ShowEditModal();

	private async void ShowEditModal()
	{
		_modalDisplay = "block;";
		_modalClass = "show";
		_showBackdrop = true;
		await updateUrlWithoutNavigation("edit", UserId);
	}
	[Parameter] public bool _showingViewModalWindow { get; set; }
	private async Task CloseEditModal()
	{
		_modalDisplay = "none;";
		_modalClass = string.Empty;
		_showBackdrop = false;
		NavigationManager.NavigateTo("/list");
		await Task.Delay(0);
	}
	private async Task updateUrlWithoutNavigation(string route, int? UserId)
	{
		string url = $"/list/{route}/{UserId}";
		await JSRuntime.InvokeVoidAsync("updateUrlWithoutNavigation", route, UserId);

	}


	private async Task SubmitForm()
	{
		try
		{
			Console.WriteLine("Submitting form...");

			// Call the UserController to update the user details
			Console.WriteLine($"Sending PUT request to /api/User/{UserId}");
			HttpResponseMessage response = await HttpClient.PutAsJsonAsync($"/api/User/{UserId}", UserDetails);

			if (response.IsSuccessStatusCode)
			{

				Console.WriteLine("Request succeeded.");
				// Show success message

				// Update the cache with the latest data from the server
				Console.WriteLine("Refreshing cache...");
				await DatabaseCache.UpdateUserOnServerAndRefreshCache(HttpClient, UserDetails);

				// Close the modal after a delay
				await OnEditModalClosed.InvokeAsync();
				await CloseEditModalSubmit();
			}
			else
			{
				Console.WriteLine("Request failed.");
				// Show error message
				showErrorMessage = true;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"An error occurred: {ex.Message}");
			// Show error message
			showErrorMessage = true;
		}
	}

	private async Task CloseEditModalSubmit()
	{
		// Reset message states
		showSuccessMessage = false;
		showErrorMessage = false;

		// Close the modal
		NavigationManager.NavigateTo("/list");
		await OnModalClosed.InvokeAsync();

	}
	private async void ShowSuccessMsg()
	{
		await OnModalClosed.InvokeAsync();

	}

	private void ShowFailureMsg()
	{
		showErrorMessage = false;

	}

	


}
