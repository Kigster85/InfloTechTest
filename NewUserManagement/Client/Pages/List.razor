@page "/list"
@using NewUserManagement.Shared.Models
@using NewUserManagement.Client.Components.Public.List
@using System.Net.Http.Json
@using System.Net.Http
@using NewUserManagement.Client.Services

<NavBar />
@if (_showingViewModalWindow == true)
{
	<View ParentMethodToCallOnClickBtnClose="() => _showingViewModalWindow = false"/>
}
<main class="container min-vh-90 py-nd-5">
    <h2 class="p-5">User List</h2>

    <div class="container min-vh-90 py-nd-5 table-responsive">

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Forename</th>
                    <th>Surname</th>
                    <th>Email</th>
                    <th>Account Active</th>
                    <th>Date Of Birth</th>
                    <th style="width: 1px;"></th>
                </tr>
            </thead>
            @if (isLoading)
            {
                <Loading />
            }
            else
            {
                <tbody>
                    @foreach (var user in DatabaseCache.Users)
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.Forename</td>
                            <td>@user.Surname</td>
                            <td>@user.Email</td>
                            <td>@(user.IsActive ? "Yes" : "No")</td>
                            <td>@user.DateOfBirth.ToShortDateString()</td>
                            <td>
                                <div class="dropdown">
                                    <button type="button" class="btn btn-default dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" id="btnToggleActions">
                                        Actions
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="btnToggleActions">
                                        <li>
																						<button @onclick="() => _showingViewModalWindow = true" class="btn dropdown-item">View</button>
                                        </li>
                                        <li>
                                            <button @onclick="() => EditUser(user.Id)" class="btn dropdown-item">Edit</button>
                                        </li>
                                        <li>
                                            <button @onclick="() => DeleteUser(user.Id)" class="btn dropdown-item">Delete</button>
                                        </li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            }
        </table>
		<div class="container py-nd-5">
			<div class="btn-group" role="group">
				<button @onclick="FetchAllUsers" class="btn btn-primary">Show All</button>
				<button @onclick="FetchActiveUsers" class="btn btn-primary">Active Only</button>
				<button @onclick="FetchInactiveUsers" class="btn btn-primary">Non Active</button>

			</div>

			<a asp-controller="Shared" asp-action="AddUser" class="btn btn-primary float-end">Add User</a>
		</div>

    </div>



</main>
<FooterBar />

@code {
		@inject InMemoryDatabaseCache DatabaseCache
		private bool showingActiveUsers = false;
		private List<User> users = new List<User>();
    private bool isLoading = true; // Flag to indicate loading state
    protected override async Task OnInitializedAsync()
    {
				await DatabaseCache.GetUsersFromDatabaseAndCache(null);
				isLoading = false;
    }

    
	private async Task FetchAllUsers()
	{
		isLoading = true; // Set loading flag to true
		try
		{
			await DatabaseCache.GetUsersFromDatabaseAndCache(null);
		}
		catch (Exception)
		{
			Console.WriteLine("User Loading from database failed. Please try again or contact a system administrator if the problem persists.");
		}
		finally
		{
			isLoading = false; // Set loading flag to false when loading completes or fails
		}
	}

	private async Task FetchActiveUsers()
	{
		try
		{
			// Check if active users are currently being displayed
			if (!showingActiveUsers)
			{
				// Fetch all users first
				await FetchAllUsers();
				showingActiveUsers = true;
			}

			// Call the GetActiveUsers method from the cache service with appropriate page and pageSize parameters
			var activeUsers = await DatabaseCache.GetActiveUsers(DatabaseCache.CurrentPage, 10); // Assuming pageSize is 10

			// Update the list of users displayed in the UI with activeUsers
			DatabaseCache.Users = activeUsers;
		}
		catch (Exception)
		{
			// Handle any errors
		}
	}

	private async Task FetchInactiveUsers()
	{
		try
		{
			// Check if inactive users are currently being displayed
			if (showingActiveUsers)
			{
				// Fetch all users first
				await FetchAllUsers();
				showingActiveUsers = false;
			}

			// Call the GetInactiveUsers method from the cache service with appropriate page and pageSize parameters
			var inactiveUsers = await DatabaseCache.GetInactiveUsers(DatabaseCache.CurrentPage, 10); // Assuming pageSize is 10

			// Update the list of users displayed in the UI with inactiveUsers
			DatabaseCache.Users = inactiveUsers;
		}
		catch (Exception)
		{
			// Handle any errors
		}
	}

		private void ViewUser(int userId)
		{
		// Handle edit user action
		}
    private void EditUser(int userId)
    {
        // Handle edit user action
    }

    private void DeleteUser(int userId)
    {
        // Handle delete user action
    }

	private bool _showingViewModalWindow = false;



	
}
