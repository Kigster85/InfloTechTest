@page "/logs"
@using NewUserManagement.Client.Services
@using NewUserManagement.Client.Components.Public.List
@using static NewUserManagement.Client.Services.LoggingClientService

<NavBar />
@if (_showingLogsModalWindow == true)
{
	<LogsViewer SelectedLogId="@SelectedLogId" LogsModalClickBtnClose="CloseModal" />
}
<main class="container min-vh-90 py-nd-5 mt-5">
	<h2 class="p-5">Log Entries</h2>
	<div class="container min-vh-90 py-nd-5">
		<div class="container-fluid">
			<div class="row">
				<div class="col">
					<!-- Filter dropdown -->
					<div class="input-group mb-3">
						<span class="input-group-text">
							<i class="fas fa-filter"></i>
						</span>
						<select class="form-select" id="filterDropdown" @onchange="OnFilterSelectionChange">
							<option value="">Select Filter</option>
							<option value="UserId">User ID</option>
							<option value="ActionTaken">Action</option>
							<!-- Add more filter options as needed -->
						</select>
						@if (selectedFilter == "UserId")
						{
							<input type="text" class="form-control" @bind="userIdFilter" placeholder="Enter UserID" />
						}
						else if(selectedFilter == "ActionTaken")
						{
							<select class="form-select" id="actionFilterDropdown" @onchange="ActionFilterSelectionChange">
								<option value="">Select Filter</option>
								<option value="Viewed">User Viewed</option>
								<option value="Edited">User Edited</option>
								<option value="UserAdded">User Added</option>
								<option value="UserDeletion">User Deletion</option>
								</select>
						}
						<button class="btn btn-primary" @onclick="ApplyFilter">Apply Filter</button>
						<button class="btn btn-secondary" @onclick="ClearFilter">Clear Filter</button>

					</div>
				</div>
			</div>
		</div>
		<table class="table table-bordered table-hover table-dark">
				<thead>
					<tr>
						<th>Date & Times</th>
						<th>Log Id</th>
						<th>UserId</th>
						<th>Action</th>
						<th></th>
					</tr>
				</thead>
			<AuthorizeView Roles="Admin">
			<Authorized Context="Auth">
			<tbody class ="container min-vh-90 py-nd-5 align-content-center">

				@if (LogEntries == null || LogEntries.Count == 0)
				{
				<span>No log entries found.</span>
				}
				else if (FilteredLogEntries != null)
				{
					foreach (var logEntry in FilteredLogEntries)
					{

								<tr class="pointer" @onclick="@(e => ViewLog(logEntry.LogId))">
									<td @onclick="@(e => ViewLog(logEntry.LogId))">@logEntry.Timestamp</td>
									<td @onclick="@(e => ViewLog(logEntry.LogId))">@logEntry.LogId</td>
									<td @onclick="@(e => ViewLog(logEntry.LogId))">@logEntry.UserId</td>
									<td @onclick="@(e => ViewLog(logEntry.LogId))">@logEntry.Action</td>
									<td class="d-flex justify-content-center" @onclick="@(e => ViewLog(logEntry.LogId))"><button class="btn btn-light">More Information</button></td>
							</tr>
							
						}
				}
				</tbody>
				</Authorized>


			</AuthorizeView>
			</table>
		<div class="mb-5 p-3"></div>

		@if (isLoading)
		{
			<Loading />
		}
		<AuthorizeView Roles="Admin">

			<NotAuthorized>


				<div class="alert alert-warning d-flex justify-content-center mt-5" role="alert">
					<span>You are not logged in. Please <a href="/login"> Sign in </a> to access this feature.</span>

				</div>

			</NotAuthorized>
		</AuthorizeView>
</div>
</main>
<FooterBar />

@code {
@inject ILogger<Logs> Logger 
	@inject LoggingClientService.ILogService _logService
	@inject HttpClient httpClient
	@inject LoggingService _loggingService
	@inject LoggingCache _loggingCache
	@inject NavigationManager NavigationManager

	public bool _showingLogsModalWindow = false;
	List<string?> UniqueUserIds { get; set; } = new List<string?>();
	private bool isLoading = true; 
	private List<LogEntry>? LogEntries;
	private List<LogEntry> FilteredLogEntries = new List<LogEntry>();
	public int SelectedLogId { get; set; }
	[Parameter] public LogEntry LogEntryDetails { get; set; }
	private string _selectedUserId { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			await _loggingService.FetchAndCacheLogEntries();
			LogEntries = await _loggingCache.GetCachedLogEntriesAsync();

			if (LogEntries != null)
			{
				// FilteredLogEntries initially contains all log entries
				FilteredLogEntries = LogEntries.ToList();
				isLoading = false;
				StateHasChanged();
			}
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "Error fetching log entries");
			// Handle error
		}
	}

	private void ViewLog(int logId)
	{
		Console.WriteLine($"Logs page - Viewing Log with ID: {logId}");

		// Set the logId
		SelectedLogId = logId;

		// Set the flag to show the modal
		_showingLogsModalWindow = true;

		StateHasChanged();
	}

	// Method to handle filtering by user ID
	private void FilterByUserId()
	{
		if (!string.IsNullOrEmpty(userIdFilter))
		{
			FilteredLogEntries = LogEntries
					.Where(log => log.UserId == userIdFilter)
					.ToList();
		}
		else
		{
			FilteredLogEntries = LogEntries.ToList();
		}
		StateHasChanged();
	}

	// Method to handle filtering
	private void FilterRecords()
	{
		// Apply filter based on SelectedUserId
		if (!string.IsNullOrEmpty(_selectedUserId))
		{
			FilteredLogEntries = LogEntries.Where(log => log.UserId == _selectedUserId).ToList();
		}
		else
		{
			// Show all records if no filter is selected
			FilteredLogEntries = LogEntries.ToList();
		}
	}

	// Method to handle onchange event of the dropdown
	private void HandleSelectedUserId(ChangeEventArgs e)
	{
		_selectedUserId = e.Value?.ToString();
	}

	private string? selectedFilter;
	private string? userIdFilter;

	// Method to handle filter selection change
	private void OnFilterSelectionChange(ChangeEventArgs e)
	{
		selectedFilter = e?.Value?.ToString();

		// Reset selectedAction when the filter changes
		if (selectedFilter != "ActionTaken")
		{
			selectedAction = null;
		}

		StateHasChanged();
	}

	private void ActionFilterSelectionChange(ChangeEventArgs e)
	{
		selectedAction = e?.Value?.ToString();
		StateHasChanged();
	}

	// ClearFilter method to reset filter criteria and reload all log entries
	private void ClearFilter()
	{
		selectedFilter = null;
		userIdFilter = null;
		selectedAction = null;
		FilteredLogEntries = LogEntries.ToList();
	}
	private string? selectedAction;

	// ApplyFilter method to call appropriate filtering method based on selected filter
	private void ApplyFilter()
	{
		if (!string.IsNullOrEmpty(selectedFilter))
		{
			if (selectedFilter == "UserId")
			{
				FilterByUserId();
			}
			else if (selectedFilter == "ActionTaken" && !string.IsNullOrEmpty(selectedAction))
			{
				FilterByAction(selectedAction);
			}
			// Add more filter conditions as needed
		}
	}

	private void FilterByAction(string action)
	{
		// Filter log entries based on the selected action
		FilteredLogEntries = LogEntries.Where(log => log.Action == action).ToList();
		StateHasChanged(); // Trigger UI refresh
	}
	@inject IJSRuntime JSRuntime

	private async Task UpdateUrlWithoutNavigation(string route, int logId, string userId)
	{
		// Construct the URL based on the route, logId, and userId
		string url = $"/logs/{route}/{logId}";


		// Invoke the JavaScript function to update the URL
		await JSRuntime.InvokeVoidAsync("updateUrlWithoutNavigation", route, logId, userId);
	}

	private void CloseModal()
	{
		_showingLogsModalWindow = false;

	}

}

