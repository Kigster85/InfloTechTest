@page "/logs"
@using NewUserManagement.Client.Services
@using static NewUserManagement.Client.Services.LoggingClientService

<NavBar />
<main class="container min-vh-90 py-nd-5">
<h3>Log Entries</h3>
	<div class="container min-vh-90 py-nd-5">

@if (LogEntries == null)
{
	<Loading />
}
else if (LogEntries.Count == 0)
{
	<p>No log entries found.</p>
}
else
		{
			<table class="table table-primary table-bordered table-hover">
				<thead>
					<tr>
						<th>Id</th>
						<th>Time</th>
						<th>UserId</th>
						<th>Action</th>
						<th></th>
					</tr>
				</thead>
				@if (isLoading)
				{
					<Loading />
				}
				else
				{
					<tbody>
						@foreach (var logEntry in LogEntries)
						{

							<tr class="pointer" @onclick="@(e => NavigateToDetails(logEntry.Id))">
								<td>@logEntry.Timestamp</td>
								<td>@logEntry.Id</td>
								<td>@logEntry.UserId</td>
								<td>@logEntry.Action</td>
								<td><button class="btn btn-dark">More Info</button></td>
							</tr>
							
						}
					</tbody>
				}
			</table>
}
		
</div>
</main>
<FooterBar />

@code {
	@inject ILogger<Logs> Logger // Inject ILogger service
	@inject LoggingClientService.ILogService _logService
	@inject HttpClient httpClient
	@inject LoggingService _loggingService
	@inject NavigationManager NavigationManager


	private bool isLoading = true; // Flag to indicate loading state

	List<LogEntry>? LogEntries { get; set; }


	protected override async Task OnInitializedAsync()
	{
		try
		{
			await _loggingService.FetchAndCacheLogEntries();
			LogEntries = _loggingService.GetCachedLogEntries();
			isLoading = false; // Data loading complete
			Console.WriteLine($"LogEntries count: {LogEntries.Count}");
			StateHasChanged(); // Force re-render

		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "Error fetching log entries");
			// Handle error (e.g., display error message)
		}
	}

	private void NavigateToDetails(int logEntryId)
	{
		NavigationManager.NavigateTo($"/details/{logEntryId}");
	}
}
