@page "/list"
@using Microsoft.EntityFrameworkCore
@using NewUserManagement.Shared.Models
@using NewUserManagement.Client.Components.Public
@using NewUserManagement.Client.Components.Public.List
@using System.Net.Http.Json
@using System.Net.Http
@using NewUserManagement.Client.Services
@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using static NewUserManagement.Client.Services.LoggingClientService


<NavBar />
@if (_showingViewModalWindow)
{
	<View ViewModalClickBtnClose="CloseModal" userId="@_selectedUserId" />
}
else if (_showingEditModalWindow)
{
	<Edit EditModalClickBtnClose="CloseModal" userId="@_selectedUserId" OnModalClosed="SuccessEditMsgOnClose" OnEditModalClosed="HandleModalClosed" />
}
else if (_showingAddModalWindow)
{
	<Add AddModalClickBtnClose="CloseModal" userId="@_selectedUserId" OnModalClosed="SuccessAddMsgOnClose" OnAddModalClosed="HandleModalClosed" />
}

<main class="container min-vh-90 py-nd-5 bg-dark mt-5">
    <h2 class="p-5">User List</h2>
	@if (showSuccessMessage == true)
	{
		<div class="alert alert-success d-flex justify-content-between fade-out" role="alert">
			<i class="fa-solid fa-circle-check"> </i>
			@{
				string message = "";
				switch (successMessageType)
				{
					case SuccessMessageType.Edit:
						message = "Updated User Details Successfully!";
						break;
					case SuccessMessageType.Add:
						message = "Added User Details Successfully!";
						break;
					case SuccessMessageType.Delete:
						message = "Deleted User/s Successfully!";
						break;
					default:
						break;
				}
			}
			<strong>@message</strong>
			<button @onclick="CloseSuccessMessage" type="button" class="btn-close" aria-label="Close"></button>
		</div>
		Console.WriteLine(message);
	}
<div class="container min-vh-90 py-nd-5 table-responsive">
		<div class="container py-nd-5">
			<div class="btn-group pb-3" role="group">
				<button @onclick="FetchAllUsers" class="btn btn-primary">Show All</button>
				<button @onclick="FetchActiveUsers" class="btn btn-primary">Active Only</button>
				<button @onclick="FetchInactiveUsers" class="btn btn-primary">Non Active</button>

			</div>
			@if (IsDeleteButtonVisible)
			{
				<button @onclick="(() => DeleteSelected())" class="btn btn-primary float-end ">Delete User</button>
			}
			<button @onclick="AddUser" class="btn btn-primary float-end">Add User</button>

		<table class="table table-bordered table-hover table-dark mb-lg-2">
            <thead>
                <tr>
						<th><input type="checkbox" checked="@IsSelectAllChecked" @onchange="ToggleSelectAll" /></th>
                    <th>Id</th>
                    <th>Forename</th>
                    <th>Surname</th>
                    <th>Email</th>
                    <th>Account Active</th>
                    <th>Date Of Birth</th>
                    <th style="width: 1px;"></th>
                </tr>
            </thead>
						<AuthorizeView Roles="Admin">
							<Authorized Context="Auth">
								<tbody class="container min-vh-90 py-nd-5 align-content-center">
										@foreach (var user in DatabaseCache.Users)
										{
												<tr class="pointer" >
									<td><input type="checkbox" @key="user" checked="@IsSelectAllChecked" @onchange="(e) => { if (user?.Id != null) ToggleSelection(user.Id, e); }" /></td>
														<td @onclick="@(e => ViewUser(user.Id))">@user.Id</td>
														<td @onclick="@(e => ViewUser(user.Id))">@user.Forename</td>
														<td @onclick="@(e => ViewUser(user.Id))">@user.Surname</td>
														<td @onclick="@(e => ViewUser(user.Id))">@user.Email</td>
														<td @onclick="@(e => ViewUser(user.Id))">@((user.IsActive == true) ? "Yes" : "No")</td>
														<td @onclick="@(e => ViewUser(user.Id))">@user.DateOfBirth.ToShortDateString()</td>

														<td>
																<div class="dropdown">
																		<button type="button" class="btn btn-light dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" id="btnToggleActions">
																				Actions
																		</button>
																		<ul class="dropdown-menu" aria-labelledby="btnToggleActions">
																				<li>
												<button @onclick="() => ViewUser(user.Id)" class="btn dropdown-item">View</button>
																				</li>
																				<li>
												<button @onclick="() => EditUser(user.Id)" class="btn dropdown-item">Edit</button>
																				</li>
																				<li>											
													<button @onclick="() => DeleteSelected(user.Id)" class="btn dropdown-item">Delete</button>
																				</li>
																		</ul>
																</div>
														</td>
												</tr>

										}
										
                </tbody>
								</Authorized>


			</AuthorizeView>
        </table>
		@if (isLoading)
		{
			<Loading />
		}
		<AuthorizeView Roles="Admin">

				<NotAuthorized>


					<div class="alert alert-warning d-flex justify-content-center mt-5" role="alert">
						<span>You are not logged in. Please <a href="/login"> Sign in </a> to access this feature.</span>

									</div>

								</NotAuthorized>
								</AuthorizeView>
			@if (IsDeleteButtonVisible)
			{
				<button @onclick="(() => DeleteSelected())" class="btn btn-primary float-end ">Delete User</button>
			}
			<div class="mb-5 p-3"></div>

		</div>
</div>

</main>
<FooterBar />

@code {
	@inject InMemoryDatabaseCache DatabaseCache
	@inject HttpClient HttpClient
	@inject ILogger<List> Logger // Inject ILogger service
	@inject LoggingClientService.ILogService _logService
	@inject LoggingService _loggingService
	private List<AppUserDTO> UserDetails = new List<AppUserDTO>();
	private bool isLoading = true; // Flag to indicate loading state
	private List<string> SelectedUserIds { get; set; } = new List<string>();
	private bool IsSelectAllChecked { get; set; } = false;
	private bool IsDeleteButtonVisible { get; set; } = false;
	private bool showingActiveUsers = false;

	protected override async Task OnInitializedAsync()
	{
	await DatabaseCache.GetUsersFromDatabaseAndCache();
	isLoading = false;
	}

	private async Task FetchAllUsers()
	{
		isLoading = true; // Set loading flag to true
		try
		{
			// Get users from the in-memory database cache
			DatabaseCache.Users = await DatabaseCache.GetAllUsers();

		}
		catch (Exception ex)
		{
			Console.WriteLine($"User Loading from database cache failed: {ex.Message}");
		}
		finally
		{
			isLoading = false; // Set loading flag to false when loading completes or fails
		}
		await Task.CompletedTask; // Ensure the method is asynchronous

	}

	private async Task FetchActiveUsers()
	{
		try
		{
			// Check if active users are currently being displayed
			if (!showingActiveUsers)
			{
				// Fetch all users first
				await FetchAllUsers();
				showingActiveUsers = true;
			}

			// Call the GetActiveUsers method from the cache service with appropriate page and pageSize parameters
			var activeUsers = await DatabaseCache.GetActiveUsers(DatabaseCache.CurrentPage, 10); // Assuming pageSize is 10

			// Update the list of users displayed in the UI with activeUsers
			DatabaseCache.Users = activeUsers;
		}
		catch (Exception)
		{
			// Handle any errors
		}
	}

	private async Task FetchInactiveUsers()
	{
		try
		{
			// Check if inactive users are currently being displayed
			if (showingActiveUsers)
			{
				// Fetch all users first
				await FetchAllUsers();
				showingActiveUsers = false;
			}

			// Call the GetInactiveUsers method from the cache service with appropriate page and pageSize parameters
			var inactiveUsers = await DatabaseCache.GetInactiveUsers(DatabaseCache.CurrentPage, 10); // Assuming pageSize is 10

			// Update the list of users displayed in the UI with inactiveUsers
			DatabaseCache.Users = inactiveUsers;
		}
		catch (Exception)
		{
			// Handle any errors
		}
	}

	private async Task DeleteSelected(string? userId = null)
	{
		try
		{
			if (userId != null)
			{
				// Delete the single user with the provided user ID
				var success = await DatabaseCache.DeleteUserByIdAsync(userId);

				if (!success)
				{
					Console.WriteLine($"Failed to delete user with ID {userId}. User not found or deletion failed.");
				}
			}
			else
			{
				// Get the IDs of selected users
				var selectedUserIds = GetSelectedUserIds();

				if (selectedUserIds.Count == 0)
				{
					// No users selected, display a message or handle it as needed
					return;
				}

				// Use the DeleteSelectedUsersAsync method from DatabaseCache to delete selected users
				var success = await DatabaseCache.DeleteSelectedUsersAsync(selectedUserIds);

				if (!success)
				{
					Console.WriteLine("Failed to delete selected users. Some deletions may have failed.");
				}
			}

			// Refresh cache and update UI
			await DatabaseCache.RefreshCache(HttpClient);
			if (IsSelectAllChecked == true)
			{
				IsSelectAllChecked = false;
			}
			StateHasChanged();
			await FetchAllUsers();
			// Display success message or perform any other necessary actions
			await SuccessDeleteMsgOnClose();
		}
		catch (Exception ex)
		{
			// Handle the error, such as displaying an error message
			Console.WriteLine($"An error occurred while deleting users: {ex.Message}");
		}
	}

	// Method to toggle the selection state of a single user
	private void ToggleSelection(string userId, ChangeEventArgs e)
	{
		if (e.Value is bool isChecked && isChecked)
		{
			SelectedUserIds.Add(userId); // Add to selected list
			Console.WriteLine($"Here is the Selected Added Users ID: {userId}");
		}
		else
		{
			SelectedUserIds.Remove(userId); // Remove from selected list
			Console.WriteLine($"Here is the Selected Removed Users ID: {userId}");

		}

		// Update IsDeleteButtonVisible based on the number of selected users
		IsDeleteButtonVisible = SelectedUserIds.Count > 0;
	}

	// Method to retrieve selected user IDs
	private List<string> GetSelectedUserIds()
	{
		return SelectedUserIds.ToList(); // Return a copy of the SelectedUserIds list
	}

	// Method to toggle the selection state of all users
	private void ToggleSelectAll(ChangeEventArgs e)
	{
		// Get the checked state of the checkbox
		bool isChecked = (bool)e.Value;

		// Update the IsSelectAllChecked property
		IsSelectAllChecked = isChecked;

		// Clear the existing selected user IDs list
		SelectedUserIds.Clear();

		// If select all checkbox is checked, add all user IDs to the selected user IDs list
		if (isChecked)
		{
			foreach (var user in DatabaseCache.Users)
			{
				SelectedUserIds.Add(user.Id!);
				Console.WriteLine($"Selected User ID: {user.Id}");

			}
		}
		else foreach (var user in DatabaseCache.Users)
		{
			SelectedUserIds.Remove(user.Id); // Remove from selected list
			Console.WriteLine($"Here is the Selected Removed Users ID: {user.Id}");

		}
		// Update IsDeleteButtonVisible based on the number of selected users
		IsDeleteButtonVisible = SelectedUserIds.Count > 0;
	}

	private string _selectedUserId { get; set; }
	public bool _showingViewModalWindow = false;
	public bool _showingEditModalWindow = false;
	public bool _showingAddModalWindow = false;

	@inject IJSRuntime JSRuntime
	private async Task UpdateUrlWithoutNavigation(string route, string userId)
	{
		// Construct the URL based on the route and userId
		string url = !string.IsNullOrEmpty(userId) ? $"/list/{route}/{userId}" : $"/list/{route}";

		// Invoke the JavaScript function to update the URL
		await JSRuntime.InvokeVoidAsync("updateUrlWithoutNavigation", route, userId);
	}


	private async void ViewUser(string userId)
	{
		Console.WriteLine($"Viewing user with ID: {userId}");
		_selectedUserId = userId; // Assign userId directly to _selectedUserId
		_showingViewModalWindow = true;
		await UpdateUrlWithoutNavigation("view", userId);
	}

	private async void EditUser(string userId)
	{
			Console.WriteLine($"Editing user with ID: {userId}");
		_selectedUserId = userId; // Assign userId directly to _selectedUserId
		_showingEditModalWindow = true; // Show the edit modal
		await UpdateUrlWithoutNavigation("edit", userId);
	}

	private async void AddUser()
	{
		_showingAddModalWindow = true; // Show the add modal
		await UpdateUrlWithoutNavigation("add", null);

	}
	private void CloseModal()
	{
		_showingAddModalWindow = false;
		_showingViewModalWindow = false;
		_showingEditModalWindow = false;

	}

	public bool showEditSuccessMessage { get; set; }
	public bool showAddSuccessMessage { get; set; }
	public bool showDeleteSuccessMessage { get; set; } = false;
	// Define SuccessMessageType enum
	enum SuccessMessageType
	{
		Edit,
		Add,
		Delete
	}

	// Properties
	private bool showSuccessMessage { get; set; } = false; // Example condition to show the message
	private SuccessMessageType successMessageType { get; set; }
	private async Task SuccessEditMsgOnClose()
	{
		showSuccessMessage = true;
		successMessageType = SuccessMessageType.Edit;
		// Display the success message
		await Task.Delay(2900);
		CloseSuccessMessage();


	}
	private async Task SuccessAddMsgOnClose()
	{
		showSuccessMessage = true;
		successMessageType = SuccessMessageType.Add;
		// Display the success message
		await Task.Delay(2900);
		CloseSuccessMessage();

	}
	private async Task SuccessDeleteMsgOnClose()
	{
		showSuccessMessage = true;
		successMessageType = SuccessMessageType.Delete;
		IsDeleteButtonVisible = false;
		StateHasChanged();
		await Task.Delay(2900); 
		HideDeleteButton();
		CloseSuccessMessage();

	}
	private void CloseSuccessMessage()
	{
		// Reset the success message flag
		showSuccessMessage = false;
		CloseModal();
	}


	private void HideDeleteButton()
	{
		// Reset the success message flag
		IsDeleteButtonVisible = false;
		SelectedUserIds.Clear();
	}
	private async Task HandleModalClosed()
	{
		// Fetch all users to refresh the user list
		await FetchAllUsers();
		StateHasChanged();

	}
}
