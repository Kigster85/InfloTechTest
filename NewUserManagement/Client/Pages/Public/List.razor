@page "/list"
@using Microsoft.EntityFrameworkCore
@using NewUserManagement.Shared.Models
@using NewUserManagement.Client.Components.Public
@using NewUserManagement.Client.Components.Public.List
@using System.Net.Http.Json
@using System.Net.Http
@using NewUserManagement.Client.Services
@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using static NewUserManagement.Client.Services.LoggingClientService


<NavBar />
@if (_showingViewModalWindow)
{
	<View ViewModalClickBtnClose="CloseModal" userId="@_selectedUserId" />
}
else if (_showingEditModalWindow)
{
	<Edit EditModalClickBtnClose="CloseModal" userId="@_selectedUserId" OnModalClosed="SuccessEditMsgOnClose" OnEditModalClosed="HandleModalClosed" />
}
else if (_showingAddModalWindow)
{
	<Add AddModalClickBtnClose="CloseModal" userId="@_selectedUserId" OnModalClosed="SuccessAddMsgOnClose" OnAddModalClosed="HandleModalClosed" />
}

<main class="container min-vh-90 py-nd-5 bg-dark">
    <h2 class="p-5">User List</h2>
	@if (showSuccessMessage == true)
	{
		<div class="alert alert-success d-flex justify-content-between fade-out" role="alert">
			<i class="fa-solid fa-circle-check"> </i>
			@{
				string message = "";
				switch (successMessageType)
				{
					case SuccessMessageType.Edit:
						message = "Updated User Details Successfully!";
						break;
					case SuccessMessageType.Add:
						message = "Added User Details Successfully!";
						break;
					case SuccessMessageType.Delete:
						message = "Deleted User/s Successfully!";
						break;
					default:
						break;
				}
			}
			<strong>@message</strong>
			<button @onclick="CloseSuccessMessage" type="button" class="btn-close" aria-label="Close"></button>
		</div>
		Console.WriteLine(message);
	}
    <div class="container min-vh-90 py-nd-5 table-responsive">

		<table class="table table-bordered table-hover table-dark">
            <thead>
                <tr>
					<th><input type="checkbox" @bind="IsSelectAllChecked" /></th>
                    <th>Id</th>
                    <th>Forename</th>
                    <th>Surname</th>
                    <th>Email</th>
                    <th>Account Active</th>
                    <th>Date Of Birth</th>
                    <th style="width: 1px;"></th>
                </tr>
            </thead>

			<tbody class="container min-vh-90 py-nd-5 align-content-center">
										@if (isLoading)
										{
											<Loading />
										}
@* 										else (!AuthenticationState.User.Identity.IsAuthenticated)
										{
											<div class="alert alert-warning" role="alert">
												You are not logged in. Please log in to access this feature.
											</div>
										} *@
										else
										{
                    @foreach (var user in DatabaseCache.Users)
										{
												<tr class="pointer" >
														<td><input type="checkbox" checked="@IsSelectAllChecked" @onchange="(e) => { if (user?.Id != null) ToggleSelection(user.Id, e); }" /></td>
														<td @onclick="@(e => ViewUser(user.Id!))">@user.Id</td>
														<td @onclick="@(e => ViewUser(user.Id!))">@user.Forename</td>
														<td @onclick="@(e => ViewUser(user.Id!))">@user.Surname</td>
														<td @onclick="@(e => ViewUser(user.Id!))">@user.UserName</td>
														<td @onclick="@(e => ViewUser(user.Id!))">@((user.IsActive == true) ? "Yes" : "No")</td>
														<td @onclick="@(e => ViewUser(user.Id!))">@user.DateOfBirth.ToShortDateString()</td>

														<td>
                                <div class="dropdown">
                                    <button type="button" class="btn btn-light dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" id="btnToggleActions">
                                        Actions
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="btnToggleActions">
                                        <li>
											<button @onclick="() => ViewUser(user.Id!)" class="btn dropdown-item">View</button>
                                        </li>
                                        <li>
											<button @onclick="() => EditUser(user.Id!)" class="btn dropdown-item">Edit</button>
                                        </li>
                                        <li>											
												<button @onclick="() => DeleteUser(user.Id)" class="btn dropdown-item">Delete</button>
																				</li>
                                    </ul>
                                </div>
                            </td>
                        </tr>

										}
								}
                </tbody>
            
        </table>
		<div class="container py-nd-5">
			<div class="btn-group" role="group">
				<button @onclick="FetchAllUsers" class="btn btn-primary">Show All</button>
				<button @onclick="FetchActiveUsers" class="btn btn-primary">Active Only</button>
				<button @onclick="FetchInactiveUsers" class="btn btn-primary">Non Active</button>

			</div>
			<button @onclick="AddUser" class="btn btn-primary float-end">Add User</button>

			@if (IsDeleteButtonVisible)
			{
				<button @onclick="DeleteSelected" class="btn btn-primary float-end">Delete User</button>
			}
		</div>

    </div>



</main>
<FooterBar />

@code {
		@inject InMemoryDatabaseCache DatabaseCache
		@inject HttpClient HttpClient
		@inject ILogger<List> Logger // Inject ILogger service
		@inject LoggingClientService.ILogService _logService
		@inject LoggingService _loggingService
	// 	@inject AuthenticationStateProvider AuthenticationStateProvider
	// private AuthenticationState AuthenticationState { get; set; }
		private List<AppUser> users = new List<AppUser>();
    private bool isLoading = true; // Flag to indicate loading state
    protected override async Task OnInitializedAsync()
    {
		// AuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
				await DatabaseCache.GetUsersFromDatabaseAndCache();
				isLoading = false;
    }
	private bool IsDeleteButtonVisible { get; set; } = false;
			    
	private async Task FetchAllUsers()
	{
		isLoading = true; // Set loading flag to true
		try
		{
			// Get users from the in-memory database cache
			DatabaseCache.Users = await DatabaseCache.GetAllUsers();

			// Alternatively, if the GetAllUsers method returns a list of users directly, you can assign it like this:
			// users = await DatabaseCache.GetAllUsers();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"User Loading from database cache failed: {ex.Message}");
		}
		finally
		{
			isLoading = false; // Set loading flag to false when loading completes or fails
		}
	}


	private void FetchActiveUsers()
	{
		try
		{
			// Filter active users from the cached list
			var activeUsers = DatabaseCache.Users.Where(u => u.IsActive).ToList();

			// Update the list of users displayed in the UI with activeUsers
			DatabaseCache.Users = activeUsers;
		}
		catch (Exception ex)
		{
			// Handle any errors
			Console.WriteLine($"An error occurred while fetching active users: {ex.Message}");
		}
	}


	private void FetchInactiveUsers()
	{
		try
		{
			// Filter inactive users from the cached list
			var inactiveUsers = DatabaseCache.Users.Where(u => !u.IsActive).ToList();

			// Update the list of users displayed in the UI with inactiveUsers
			DatabaseCache.Users = inactiveUsers;
		}
		catch (Exception ex)
		{
			// Handle any errors
			Console.WriteLine($"An error occurred while fetching inactive users: {ex.Message}");
		}
	}



	private async Task DeleteUser(string? userId)
	{
		try
		{
			if (!string.IsNullOrEmpty(userId))
			{
				// Find the user in the cache
				var userToDelete = DatabaseCache.Users.FirstOrDefault(u => u.Id == userId);

				if (userToDelete != null)
				{
					// Remove the user from the cache
					DatabaseCache.Users.Remove(userToDelete);

					// Optionally, you can perform other actions here like sending a request to the server to delete the user permanently

					Console.WriteLine($"User with ID {userId} deleted successfully.");
					await SuccessDeleteMsgOnClose();
				}
				else
				{
					Console.WriteLine($"User with ID {userId} not found in the cache.");
				}
			}
			else
			{
				Console.WriteLine("User ID is null or empty.");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"An error occurred while deleting user with ID {userId}: {ex.Message}");
		}
	}



	private async Task DeleteSelected()
	{
		try
		{
			// Get the IDs of selected users
			var selectedUserIds = GetSelectedUserIds();
			if (selectedUserIds.Count == 0)
			{
				// No users selected, display a message or handle it as needed
				return;
			}

			// Iterate through selected user IDs and delete each user
			foreach (var userId in selectedUserIds)
			{
				// Find the user in the cache
				var userToDelete = DatabaseCache.Users.FirstOrDefault(u => u.Id == userId);

				if (userToDelete != null)
				{
					// Remove the user from the cache
					DatabaseCache.Users.Remove(userToDelete);

					Console.WriteLine($"User with ID {userId} deleted successfully.");
				}
				else
				{
					Console.WriteLine($"Failed to delete user with ID {userId}. User not found in the cache.");
				}
			}

			// Clear the selected user IDs list and hide the delete button
			SelectedUserIds.Clear();
			IsSelectAllChecked = false;

			// Notify Blazor to re-render the component and update the UI
			StateHasChanged();

			// Display success message or perform any other necessary actions
			await SuccessDeleteMsgOnClose();
		}
		catch (Exception ex)
		{
			// Handle the error, such as displaying an error message
			Console.WriteLine($"An error occurred while deleting selected users: {ex.Message}");

			// Log the exception
			Logger.LogError(ex, "Error occurred while deleting selected users: {ErrorMessage}", ex.Message);
		}
	}




	
	// Method to retrieve selected user IDs
	private List<string> GetSelectedUserIds()
	{
		return SelectedUserIds.ToList(); // Return a copy of the SelectedUserIds list
	}

	private List<string> SelectedUserIds { get; set; } = new List<string>();
	private void ToggleSelection(string userId, ChangeEventArgs e)
	{
		if (e.Value is bool isChecked && isChecked)
		{
			SelectedUserIds.Add(userId); // Add to selected list
		}
		else
		{
			SelectedUserIds.Remove(userId); // Remove from selected list
		}

		// Update IsDeleteButtonVisible based on the number of selected users
		IsDeleteButtonVisible = SelectedUserIds.Count > 0;
	}
	private bool IsSelectAllChecked { get; set; }

	// Method to toggle the selection state of all users
	private void ToggleSelectAll()
	{
		// Clear the existing selected user IDs list if the select all checkbox is unchecked
		if (!IsSelectAllChecked)
		{
			SelectedUserIds.Clear();
			return;
		}

		// If select all checkbox is checked, add all user IDs to the selected user IDs list
		SelectedUserIds.Clear();
		foreach (var user in DatabaseCache.Users)
		{
			SelectedUserIds.Add(user.Id!);
		}
	}

	private string? _selectedUserId { get; set; }
	public bool _showingViewModalWindow = false;
	public bool _showingEditModalWindow = false;
	public bool _showingAddModalWindow = false;

	@inject IJSRuntime JSRuntime
	private async Task UpdateUrlWithoutNavigation(string route, string userId)
	{
		// Construct the URL based on the route and userId
		string url = !string.IsNullOrEmpty(userId) ? $"/list/{route}/{userId}" : $"/list/{route}";

		// Invoke the JavaScript function to update the URL
		await JSRuntime.InvokeVoidAsync("updateUrlWithoutNavigation", route, userId);
	}


	private async void ViewUser(string userId)
	{
		Console.WriteLine($"Viewing user with ID: {userId}");
		_selectedUserId = userId; // Assign userId directly to _selectedUserId
		_showingViewModalWindow = true;
		await UpdateUrlWithoutNavigation("view", userId);
	}


	private async void EditUser(string userId)
	{
		_selectedUserId = userId; // Assign userId directly to _selectedUserId
		_showingEditModalWindow = true; // Show the edit modal
		await UpdateUrlWithoutNavigation("edit", userId);
	}


	private void AddUser()
	{
		_showingAddModalWindow = true; // Show the add modal
	}
	private void CloseModal()
	{
		_showingAddModalWindow = false;
		_showingViewModalWindow = false;
		_showingEditModalWindow = false;

	}


	public bool showEditSuccessMessage { get; set; }
	public bool showAddSuccessMessage { get; set; }
	public bool showDeleteSuccessMessage { get; set; } = false;
	// Define SuccessMessageType enum
	enum SuccessMessageType
	{
		Edit,
		Add,
		Delete
	}

	// Properties
	private bool showSuccessMessage { get; set; } = false; // Example condition to show the message
	private SuccessMessageType successMessageType { get; set; }
	private async Task SuccessEditMsgOnClose()
	{
		showSuccessMessage = true;
		successMessageType = SuccessMessageType.Edit;
		// Display the success message
		// Delay before showing the success message
		await Task.Delay(3000);
		CloseSuccessMessage();


	}
	private async Task SuccessAddMsgOnClose()
	{
		showSuccessMessage = true;
		successMessageType = SuccessMessageType.Add;
		// Display the success message
		// Delay before showing the success message
		await Task.Delay(3000);
		CloseSuccessMessage();

	}
	private async Task SuccessDeleteMsgOnClose()
	{
		showSuccessMessage = true;
		successMessageType = SuccessMessageType.Delete;
		IsDeleteButtonVisible = false;
		StateHasChanged();
		await Task.Delay(3000); // Delay for 3 seconds
		HideDeleteButton();
		CloseSuccessMessage();

	}
	private void CloseSuccessMessage()
	{
		// Reset the success message flag
		showSuccessMessage = false;
		CloseModal();
	}


	private void HideDeleteButton()
	{
		// Reset the success message flag
		IsDeleteButtonVisible = false;
		SelectedUserIds.Clear();

	}
	private async Task HandleModalClosed()
	{
		// Fetch all users to refresh the user list
		await FetchAllUsers();
		StateHasChanged();

	}
}
