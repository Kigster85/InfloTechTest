// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewUserManagement.Server.Data;

#nullable disable

namespace NewUserManagement.Server.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240306010054_InitialCommit")]
    partial class InitialCommit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.16");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ef231070-2e2f-4656-9465-403153dcc55c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b2352a1e-7ea8-4521-a776-315e06d8c3fa",
                            RoleId = "ef231070-2e2f-4656-9465-403153dcc55c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NewUserManagement.Shared.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Forename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b2352a1e-7ea8-4521-a776-315e06d8c3fa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01c1f48e-dee7-4ca8-9539-60214ffd60a9",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            EmailAddress = "admin@example.com",
                            EmailConfirmed = false,
                            Forename = "Admin",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAEDVC9KmYCrJgZBuEWidDphkSusjsH+Aqbe2r9kisH3WJ82E10jeTLE9AQj0AXOiCBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d65593e7-e0fe-490b-975a-6ce7fc321406",
                            Surname = "User",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "60df61bc-eb74-4567-98b9-e4bd10ebdd92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92494087-40ce-47cf-9ba0-8fad0bbdf296",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ploew@example.com",
                            EmailAddress = "ploew@example.com",
                            EmailConfirmed = false,
                            Forename = "Peter",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAEDVC9KmYCrJgZBuEWidDphkSusjsH+Aqbe2r9kisH3WJ82E10jeTLE9AQj0AXOiCBQ==",
                            PasswordHash = "AQAAAAIAAYagAAAAECxe6dPYQs9v69TD/+A/gw5cdauUvZ8pzqMp1Io4wKNI/BlmXT67BMsPVoAiHvYWxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e31bb621-1e93-45ba-9c22-81cabf3d179f",
                            Surname = "Loew",
                            TwoFactorEnabled = false,
                            UserName = "ploew@example.com"
                        },
                        new
                        {
                            Id = "901f0fb8-a07e-4e20-8bc1-6c5151e9ec05",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e635b10-2410-4e07-a7a3-e13b612b48f3",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bfgates@example.com",
                            EmailAddress = "bfgates@example.com",
                            EmailConfirmed = false,
                            Forename = "Benjamin Franklin",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAEDVC9KmYCrJgZBuEWidDphkSusjsH+Aqbe2r9kisH3WJ82E10jeTLE9AQj0AXOiCBQ==",
                            PasswordHash = "AQAAAAIAAYagAAAAEIcRTKFJE4TJu2ai85WBHwNQwl4XwGEhGRATJdYzTYkqSJ4bbXOkbZtXNGJ6V9Ttsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72dad0e2-fdfd-427c-b0e4-3e2ed13ea91f",
                            Surname = "Gates",
                            TwoFactorEnabled = false,
                            UserName = "bfgates@example.com"
                        },
                        new
                        {
                            Id = "c5515491-0cb3-45b7-aa35-9ea9459be365",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a46fdb9-eff9-4e86-8ecd-e3b4d2b61aff",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ctroy@example.com",
                            EmailAddress = "ctroy@example.com",
                            EmailConfirmed = false,
                            Forename = "Castor",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAEDVC9KmYCrJgZBuEWidDphkSusjsH+Aqbe2r9kisH3WJ82E10jeTLE9AQj0AXOiCBQ==",
                            PasswordHash = "AQAAAAIAAYagAAAAEHV5G6i3TIvliPLcBNxfRL198blT2Q1cp4jlnx92tfpYOuAARuD1RHaV1XNZZk2LCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8acc08e2-29b0-4d16-a083-09557b97569e",
                            Surname = "Troy",
                            TwoFactorEnabled = false,
                            UserName = "ctroy@example.com"
                        },
                        new
                        {
                            Id = "df5596d7-26ad-48e2-a8b0-5e12bf94ea0f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ceb749b3-077a-4556-a726-3d33bc5e1e83",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mraines@example.com",
                            EmailAddress = "mraines@example.com",
                            EmailConfirmed = false,
                            Forename = "Memphis",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAEDVC9KmYCrJgZBuEWidDphkSusjsH+Aqbe2r9kisH3WJ82E10jeTLE9AQj0AXOiCBQ==",
                            PasswordHash = "AQAAAAIAAYagAAAAEJF0J/qYFjpRvCcVHtDyqjo3QL1RjNJCvmY2oAk8kMZJJnatT0u7+JtZW6mOoO97tQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b656d931-39e0-4e3e-8d88-15740b993ba5",
                            Surname = "Raines",
                            TwoFactorEnabled = false,
                            UserName = "mraines@example.com"
                        },
                        new
                        {
                            Id = "ea6d152f-72ea-49dd-abf4-cf2fc30411f6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f4a2a1d-bca4-4a50-8f0d-8cdaf18734d2",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sgodspeed@example.com",
                            EmailAddress = "sgodspeed@example.com",
                            EmailConfirmed = false,
                            Forename = "Stanley",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAEDVC9KmYCrJgZBuEWidDphkSusjsH+Aqbe2r9kisH3WJ82E10jeTLE9AQj0AXOiCBQ==",
                            PasswordHash = "AQAAAAIAAYagAAAAEDoRAdNHh74sCi9JJ1MiQa+8YibEnSq654cQYzdHXCVN/PXGJc32rNDKWVY6q3avWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d23e1753-0042-4aea-b69f-d53c2c128a36",
                            Surname = "Goodspeed",
                            TwoFactorEnabled = false,
                            UserName = "sgodspeed@example.com"
                        },
                        new
                        {
                            Id = "d24e24c0-985b-4663-b768-688450997091",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f80b6de2-8154-41a5-af2c-ae5c531fd2e0",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "himcdunnough@example.com",
                            EmailAddress = "himcdunnough@example.com",
                            EmailConfirmed = false,
                            Forename = "H.I.",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAEDVC9KmYCrJgZBuEWidDphkSusjsH+Aqbe2r9kisH3WJ82E10jeTLE9AQj0AXOiCBQ==",
                            PasswordHash = "AQAAAAIAAYagAAAAEOCADHBl+rEF2hv1wBFOL/d5SpGsPbR+tyPGwUDKelsNA/7X/EalEYdSTMvJxFaroQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49b253d5-0c9b-4e00-a529-5d4a895cab00",
                            Surname = "McDunnough",
                            TwoFactorEnabled = false,
                            UserName = "himcdunnough@example.com"
                        },
                        new
                        {
                            Id = "8f8f271d-c3ab-4ac6-838e-d00b5f7cc6f3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5952abd5-dd58-4553-9eeb-fea771046055",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cpoe@example.com",
                            EmailAddress = "cpoe@example.com",
                            EmailConfirmed = false,
                            Forename = "Cameron",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAEDVC9KmYCrJgZBuEWidDphkSusjsH+Aqbe2r9kisH3WJ82E10jeTLE9AQj0AXOiCBQ==",
                            PasswordHash = "AQAAAAIAAYagAAAAEJoj/3a2HojWKAx+Ka77vHVEbLSSKZTrgsBnTKwAD3wRBSKH3LKt3dK2ekn0R1IN8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "828fece5-8569-40c5-92d1-2b3744b0a49a",
                            Surname = "Poe",
                            TwoFactorEnabled = false,
                            UserName = "cpoe@example.com"
                        },
                        new
                        {
                            Id = "4aefaeaf-3392-4afe-bdc8-b88f642f61fb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad702eec-9a8a-4a2c-a408-34c54a0fcf85",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emalus@example.com",
                            EmailAddress = "emalus@example.com",
                            EmailConfirmed = false,
                            Forename = "Edward",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAEDVC9KmYCrJgZBuEWidDphkSusjsH+Aqbe2r9kisH3WJ82E10jeTLE9AQj0AXOiCBQ==",
                            PasswordHash = "AQAAAAIAAYagAAAAEHcDv45UsLqeZDvgmirhzwsjZ0qy3zeM+v6TNmI4tNmbz5R4EfN3VYZZMPL1DGAXNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6def7e7-7cf8-4f1f-9f61-2e001214bfaf",
                            Surname = "Malus",
                            TwoFactorEnabled = false,
                            UserName = "emalus@example.com"
                        },
                        new
                        {
                            Id = "ea8e4f3b-d83a-455b-9422-9ec2979e1384",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62c91de4-c82d-4639-9df9-e58cbd4c5ea1",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dmacready@example.com",
                            EmailAddress = "dmacready@example.com",
                            EmailConfirmed = false,
                            Forename = "Damon",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAEDVC9KmYCrJgZBuEWidDphkSusjsH+Aqbe2r9kisH3WJ82E10jeTLE9AQj0AXOiCBQ==",
                            PasswordHash = "AQAAAAIAAYagAAAAEFOBCDoc4xg8041pHMVRnHKitqLwpilaqTJKILtymx3hINR8YKWsGBrmgv+QyJQ2Zg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c365d49-e98f-4ecb-9960-f924246b798d",
                            Surname = "Macready",
                            TwoFactorEnabled = false,
                            UserName = "dmacready@example.com"
                        },
                        new
                        {
                            Id = "2e6f6df0-dbb5-4b0d-970d-32568547d765",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1f08fea-4424-4a30-b39f-ef72678f2ca4",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jblaze@example.com",
                            EmailAddress = "jblaze@example.com",
                            EmailConfirmed = false,
                            Forename = "Johnny",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAEDVC9KmYCrJgZBuEWidDphkSusjsH+Aqbe2r9kisH3WJ82E10jeTLE9AQj0AXOiCBQ==",
                            PasswordHash = "AQAAAAIAAYagAAAAEGKoNvfCYxUNc967teFVW4NcDJbhBO4j6mDiExw70K1tg3AWswTTaIx8zGng5303zQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd866ab5-2fd9-4d40-8621-197e56ac59b7",
                            Surname = "Blaze",
                            TwoFactorEnabled = false,
                            UserName = "jblaze@example.com"
                        },
                        new
                        {
                            Id = "585280a3-5351-4cfb-a0c6-cdd135cb7038",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "582e09c1-7d45-4c1c-a0d8-98fc894f0ff4",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "rfeld@example.com",
                            EmailAddress = "rfeld@example.com",
                            EmailConfirmed = false,
                            Forename = "Robin",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAEDVC9KmYCrJgZBuEWidDphkSusjsH+Aqbe2r9kisH3WJ82E10jeTLE9AQj0AXOiCBQ==",
                            PasswordHash = "AQAAAAIAAYagAAAAEC39qefHxJsRHo0feonEgjgqK7U7qe6x7YjN4tZvLbl98N4/DF9yEMAw3XHxOXp2tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bacbd181-8b49-4a4d-8522-5c7f413cea76",
                            Surname = "Feld",
                            TwoFactorEnabled = false,
                            UserName = "rfeld@example.com"
                        });
                });

            modelBuilder.Entity("NewUserManagement.Shared.Models.LogDBEntry", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<int>("EditCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeletedUserEntry")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("LogId");

                    b.ToTable("LogEntries", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
