// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewUserManagement.Server.Data;

#nullable disable

namespace NewUserManagement.Server.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240311185915_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.16");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "97c7f19d-fc06-4403-8f6b-4f0a2e928916",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d0d3e2c6-9df2-4563-b71b-7114a594930d",
                            RoleId = "97c7f19d-fc06-4403-8f6b-4f0a2e928916"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NewUserManagement.Shared.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Forename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d0d3e2c6-9df2-4563-b71b-7114a594930d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db57fa0e-5b24-4c17-bd50-db48767884d0",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            Forename = "Admin",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAENXl+qwNA+GiFzN1uYqwKzV3yp5rnInqAgtqHBcUb3KI6qwU/wmCC5JAxURKg3tUvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5b22ed0-2311-411d-b854-f5cc146cbfd3",
                            Surname = "User",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com",
                            emailAddress = "admin@example.com"
                        },
                        new
                        {
                            Id = "0050627b-f3dd-429b-a2d5-0749adc540ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7605933c-b28f-45ea-a26b-a0561bc7a7a1",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ploew@example.com",
                            EmailConfirmed = false,
                            Forename = "Peter",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENXl+qwNA+GiFzN1uYqwKzV3yp5rnInqAgtqHBcUb3KI6qwU/wmCC5JAxURKg3tUvw==",
                            PasswordHash = "AQAAAAIAAYagAAAAELAUra/Pde63e3GyNZ6U+m57XbmXl7ANCWLpz3fjI9kPlw1E67cloyqxd3BS7+vPbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "afcae9b3-54ee-4b67-8841-8917aa1e7cc2",
                            Surname = "Loew",
                            TwoFactorEnabled = false,
                            UserName = "ploew@example.com",
                            emailAddress = "ploew@example.com"
                        },
                        new
                        {
                            Id = "6892e176-e47f-4e71-9f8a-141b658c78c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25adfbae-45a9-4d2d-90ee-130e39e1ffb3",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bfgates@example.com",
                            EmailConfirmed = false,
                            Forename = "Benjamin Franklin",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENXl+qwNA+GiFzN1uYqwKzV3yp5rnInqAgtqHBcUb3KI6qwU/wmCC5JAxURKg3tUvw==",
                            PasswordHash = "AQAAAAIAAYagAAAAEOsxz1/933z3ywavs9AQGVr9J2FOijXaor2R/iSNqC/pcY8Ie1RtckCtXbtJjxSCeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19a7f78e-957d-4aac-a6a0-0edcb6c4c3b9",
                            Surname = "Gates",
                            TwoFactorEnabled = false,
                            UserName = "bfgates@example.com",
                            emailAddress = "bfgates@example.com"
                        },
                        new
                        {
                            Id = "61c39edd-4e45-4e90-ba45-5564f7c0aceb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1da0093b-f6a8-4c78-8eca-0dd18143c7d3",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ctroy@example.com",
                            EmailConfirmed = false,
                            Forename = "Castor",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENXl+qwNA+GiFzN1uYqwKzV3yp5rnInqAgtqHBcUb3KI6qwU/wmCC5JAxURKg3tUvw==",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ8sB/FJXRlx86K+MndwBSxHriyfe2iOqYLx0dWGmHodPExx+gqX7siW9jGbjIso0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a539d5e-055e-46e8-a1fd-fce79f58b7c7",
                            Surname = "Troy",
                            TwoFactorEnabled = false,
                            UserName = "ctroy@example.com",
                            emailAddress = "ctroy@example.com"
                        },
                        new
                        {
                            Id = "1dd76690-6bed-4e01-8271-9f23c0a9443f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94ea24c2-fc71-442a-bcbe-93fbc4d84fa8",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mraines@example.com",
                            EmailConfirmed = false,
                            Forename = "Memphis",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENXl+qwNA+GiFzN1uYqwKzV3yp5rnInqAgtqHBcUb3KI6qwU/wmCC5JAxURKg3tUvw==",
                            PasswordHash = "AQAAAAIAAYagAAAAEGNGprVil/UBxjM5E5sBKQW0To/YPCtNNZavPnLAif5FLyJIJBTliMHp1e+x/lBGYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "767b7efb-6b7f-4d64-b629-8e2f03250236",
                            Surname = "Raines",
                            TwoFactorEnabled = false,
                            UserName = "mraines@example.com",
                            emailAddress = "mraines@example.com"
                        },
                        new
                        {
                            Id = "bea53bf6-befa-46e1-9839-8cd5f803587b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b7020b5-bd3c-41dd-9e24-d5c11b870883",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sgodspeed@example.com",
                            EmailConfirmed = false,
                            Forename = "Stanley",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENXl+qwNA+GiFzN1uYqwKzV3yp5rnInqAgtqHBcUb3KI6qwU/wmCC5JAxURKg3tUvw==",
                            PasswordHash = "AQAAAAIAAYagAAAAEEcEgEkZijgEyisTEJIN/AsyVUilX6jTZA5iMZUYJPDSLKIHJRJyRMo1cozQbr3t0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9cd3c77-5219-4555-a403-81d103d33d49",
                            Surname = "Goodspeed",
                            TwoFactorEnabled = false,
                            UserName = "sgodspeed@example.com",
                            emailAddress = "sgodspeed@example.com"
                        },
                        new
                        {
                            Id = "e2182448-7f5c-4cdd-810e-421bd316ebe3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca43e630-a0d7-46f0-ada4-5b144838aa30",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "himcdunnough@example.com",
                            EmailConfirmed = false,
                            Forename = "H.I.",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENXl+qwNA+GiFzN1uYqwKzV3yp5rnInqAgtqHBcUb3KI6qwU/wmCC5JAxURKg3tUvw==",
                            PasswordHash = "AQAAAAIAAYagAAAAEFt8BTZCvR/6i7X4psTBT9tRhU2cTpO6vWI2mniNO+2bqynPglvyqDktjK4iKxCewQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0894af26-37f6-4507-8487-7c97bc168ea5",
                            Surname = "McDunnough",
                            TwoFactorEnabled = false,
                            UserName = "himcdunnough@example.com",
                            emailAddress = "himcdunnough@example.com"
                        },
                        new
                        {
                            Id = "518923be-6c58-4254-a2b6-4ebaffb664d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "092851ad-3952-4be2-9362-572a3ffa197d",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cpoe@example.com",
                            EmailConfirmed = false,
                            Forename = "Cameron",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENXl+qwNA+GiFzN1uYqwKzV3yp5rnInqAgtqHBcUb3KI6qwU/wmCC5JAxURKg3tUvw==",
                            PasswordHash = "AQAAAAIAAYagAAAAEBlABBC59TsYj3hvAFzsb6UJ/kctf9GLaBccZG0xZhsb5JfUr5rdAlFLtvHzR7ZIHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "983d1884-8fbd-4235-b232-5d155a01d6cd",
                            Surname = "Poe",
                            TwoFactorEnabled = false,
                            UserName = "cpoe@example.com",
                            emailAddress = "cpoe@example.com"
                        },
                        new
                        {
                            Id = "1dc31d76-c3ae-4bcc-803b-f8be24b7280f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c67e562-b21a-47ec-8b5f-b2096ba8ec2d",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emalus@example.com",
                            EmailConfirmed = false,
                            Forename = "Edward",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENXl+qwNA+GiFzN1uYqwKzV3yp5rnInqAgtqHBcUb3KI6qwU/wmCC5JAxURKg3tUvw==",
                            PasswordHash = "AQAAAAIAAYagAAAAEJybyPeNiKGEHmSm14ttI/p+JXqpj4MupVLveAA6FB8ziWVgYpDo0vLBjp1C0LP5mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94c5a7bc-5b29-46cd-95a4-8256b8805a87",
                            Surname = "Malus",
                            TwoFactorEnabled = false,
                            UserName = "emalus@example.com",
                            emailAddress = "emalus@example.com"
                        },
                        new
                        {
                            Id = "1870a854-f2d7-45dc-a648-ae73f9a41566",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8fe94e0-4c41-42fe-86cc-448d2c480594",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dmacready@example.com",
                            EmailConfirmed = false,
                            Forename = "Damon",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENXl+qwNA+GiFzN1uYqwKzV3yp5rnInqAgtqHBcUb3KI6qwU/wmCC5JAxURKg3tUvw==",
                            PasswordHash = "AQAAAAIAAYagAAAAEOpVzV7Qyv+j8Q4O6GPK9UtIQTpoe8Gb/Jt+hgkuEdM9RWN2kt4b4ccPGupYC4MP1g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "445a50e3-14e7-41fb-8bf3-c65e6bcfee2b",
                            Surname = "Macready",
                            TwoFactorEnabled = false,
                            UserName = "dmacready@example.com",
                            emailAddress = "dmacready@example.com"
                        },
                        new
                        {
                            Id = "0059ad64-a97b-4fc2-9767-b4b9066a7b5d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "539de745-d290-4ef8-87c6-c1037f909a3d",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jblaze@example.com",
                            EmailConfirmed = false,
                            Forename = "Johnny",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENXl+qwNA+GiFzN1uYqwKzV3yp5rnInqAgtqHBcUb3KI6qwU/wmCC5JAxURKg3tUvw==",
                            PasswordHash = "AQAAAAIAAYagAAAAEF2/fWL5SGiMefaWgaPUKSIm0Mb8tMwB/GByQfyzPL6zJBnOrbcUOTm0zYo6EVpvwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a582b1ec-ce52-4e69-8b05-0f3319777ec1",
                            Surname = "Blaze",
                            TwoFactorEnabled = false,
                            UserName = "jblaze@example.com",
                            emailAddress = "jblaze@example.com"
                        },
                        new
                        {
                            Id = "cf86a3cf-a6c7-45f8-998b-18d1c060153d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc812bde-4aae-47d9-abbb-9359e0c6fe7c",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "rfeld@example.com",
                            EmailConfirmed = false,
                            Forename = "Robin",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENXl+qwNA+GiFzN1uYqwKzV3yp5rnInqAgtqHBcUb3KI6qwU/wmCC5JAxURKg3tUvw==",
                            PasswordHash = "AQAAAAIAAYagAAAAED9llX7tPartp2t6meXuD6Dj6i3DsTaUzBEM3B+k7jdW05JnDcjSKMguX9gojM4VBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "264c9e16-bbab-428d-98b0-5ba12adfdd21",
                            Surname = "Feld",
                            TwoFactorEnabled = false,
                            UserName = "rfeld@example.com",
                            emailAddress = "rfeld@example.com"
                        });
                });

            modelBuilder.Entity("NewUserManagement.Shared.Models.LogDBEntry", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<int>("EditCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeletedUserEntry")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("LogId");

                    b.ToTable("LogEntries", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
