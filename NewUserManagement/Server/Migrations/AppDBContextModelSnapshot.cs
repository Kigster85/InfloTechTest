// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewUserManagement.Server.Data;

#nullable disable

namespace NewUserManagement.Server.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.16");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e04cd014-e899-4249-aa96-62a47a92d7dd",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "5af9f472-1c06-4469-a619-8fea3bc2c626",
                            RoleId = "e04cd014-e899-4249-aa96-62a47a92d7dd"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NewUserManagement.Shared.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Forename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5af9f472-1c06-4469-a619-8fea3bc2c626",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "525d21d9-cdf4-4f86-a05c-b22ffc112616",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            Forename = "Admin",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAENdTvAL5YMFleToExelPXyc7nhMuamGTemNs0I0/fOP+AFKToNBBMiIyOFUuZd9Dew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0914bd24-7af4-4517-aee5-54f07ba4aae4",
                            Surname = "User",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com",
                            emailAddress = "admin@example.com"
                        },
                        new
                        {
                            Id = "f1529162-c9e0-4d6b-9151-47dd5cdd7c72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d104407e-477b-4d50-a1ee-f8a34869d626",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ploew@example.com",
                            EmailConfirmed = false,
                            Forename = "Peter",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENdTvAL5YMFleToExelPXyc7nhMuamGTemNs0I0/fOP+AFKToNBBMiIyOFUuZd9Dew==",
                            PasswordHash = "AQAAAAIAAYagAAAAEDdxtynIwmUemJlm4jVJQ6JZZ0g1dqXJ6B+nAu2x5LwZkr250pck4ru/auFyc7ZUMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d877e9a-0334-4774-9b14-fe432a0d3ef8",
                            Surname = "Loew",
                            TwoFactorEnabled = false,
                            UserName = "ploew@example.com",
                            emailAddress = "ploew@example.com"
                        },
                        new
                        {
                            Id = "2c7eef5a-277d-4cfb-ba24-b9a52b07160e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a77753e-fa68-45be-9ddd-fa2892a79fd2",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bfgates@example.com",
                            EmailConfirmed = false,
                            Forename = "Benjamin Franklin",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENdTvAL5YMFleToExelPXyc7nhMuamGTemNs0I0/fOP+AFKToNBBMiIyOFUuZd9Dew==",
                            PasswordHash = "AQAAAAIAAYagAAAAEJZ78CF9dn71am7odxumOVGhJ7djt3qpwL6gdQYw8J+ZeTCzkAlQTsgGeZfyjU5dGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46273d2c-309f-4b31-b247-dfc9eefecc18",
                            Surname = "Gates",
                            TwoFactorEnabled = false,
                            UserName = "bfgates@example.com",
                            emailAddress = "bfgates@example.com"
                        },
                        new
                        {
                            Id = "c09f18a1-955b-4b67-841f-176590cdef82",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7485a27e-ec8a-430c-b1ad-38a43708aa32",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ctroy@example.com",
                            EmailConfirmed = false,
                            Forename = "Castor",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENdTvAL5YMFleToExelPXyc7nhMuamGTemNs0I0/fOP+AFKToNBBMiIyOFUuZd9Dew==",
                            PasswordHash = "AQAAAAIAAYagAAAAEAWbd5YGY7/92XRIQBK7nffFHztt8u0bDpXkDc4lyVPgKnn4szCzcf30Ik6MwaiVdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44ff51bb-2df6-4a9a-97ac-9aeec9907e6e",
                            Surname = "Troy",
                            TwoFactorEnabled = false,
                            UserName = "ctroy@example.com",
                            emailAddress = "ctroy@example.com"
                        },
                        new
                        {
                            Id = "d6d30808-8cdf-46af-a8b1-4187de5084ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f285324-30cc-434f-90e1-a4bb1bf61a18",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mraines@example.com",
                            EmailConfirmed = false,
                            Forename = "Memphis",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENdTvAL5YMFleToExelPXyc7nhMuamGTemNs0I0/fOP+AFKToNBBMiIyOFUuZd9Dew==",
                            PasswordHash = "AQAAAAIAAYagAAAAEFSPlVAIGwT9qkcy3W5RG7j9pQhMwG8oMAPtaQBQ/kuozwkEn7AfW3xt1oa5qmMDDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f82424f-f6ee-4277-9883-2e9282b598c5",
                            Surname = "Raines",
                            TwoFactorEnabled = false,
                            UserName = "mraines@example.com",
                            emailAddress = "mraines@example.com"
                        },
                        new
                        {
                            Id = "bdc38d22-618e-47ff-b765-1080f714c8fc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22fe4efd-ae8e-4bdb-bd88-5998101f48d8",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sgodspeed@example.com",
                            EmailConfirmed = false,
                            Forename = "Stanley",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENdTvAL5YMFleToExelPXyc7nhMuamGTemNs0I0/fOP+AFKToNBBMiIyOFUuZd9Dew==",
                            PasswordHash = "AQAAAAIAAYagAAAAEO8iKuEoyVXR2dsXtgaXGJENngSdcVeggA2+117FKt8cI3dyrv+uX6a32ZkIUc+HKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a10960b9-2801-4574-877a-cf32a30fe177",
                            Surname = "Goodspeed",
                            TwoFactorEnabled = false,
                            UserName = "sgodspeed@example.com",
                            emailAddress = "sgodspeed@example.com"
                        },
                        new
                        {
                            Id = "4c9662fe-6b29-446a-ae1e-d3efd29f295a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9694348c-502a-449e-9f16-09812f199460",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "himcdunnough@example.com",
                            EmailConfirmed = false,
                            Forename = "H.I.",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENdTvAL5YMFleToExelPXyc7nhMuamGTemNs0I0/fOP+AFKToNBBMiIyOFUuZd9Dew==",
                            PasswordHash = "AQAAAAIAAYagAAAAEDg6ZGZZNyHDC4YjLWsURqnrj8LBE5LgAVEIPXDt5Ga4Mqr0WrZqO5yq9AmZAMADGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8657df1-12b7-4595-a8b1-3e9688978db8",
                            Surname = "McDunnough",
                            TwoFactorEnabled = false,
                            UserName = "himcdunnough@example.com",
                            emailAddress = "himcdunnough@example.com"
                        },
                        new
                        {
                            Id = "2ea068fa-6e8a-4ffb-860e-678a2728d2b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "622941b8-c914-4102-9972-9ed8a3a78604",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cpoe@example.com",
                            EmailConfirmed = false,
                            Forename = "Cameron",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENdTvAL5YMFleToExelPXyc7nhMuamGTemNs0I0/fOP+AFKToNBBMiIyOFUuZd9Dew==",
                            PasswordHash = "AQAAAAIAAYagAAAAEK8OmF47CzbIKjRudNAEKEYoTvlvgWHb3f6gB9jhfRF/b8qIwn2GZqkXmOUsweW/Rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f433bbb9-df08-4663-b3b3-ec9e37e23aa2",
                            Surname = "Poe",
                            TwoFactorEnabled = false,
                            UserName = "cpoe@example.com",
                            emailAddress = "cpoe@example.com"
                        },
                        new
                        {
                            Id = "cce3ae8d-02c9-422d-9660-2bee2be19d19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e8a38b1-aed5-4afd-b6ef-c7c1653674df",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emalus@example.com",
                            EmailConfirmed = false,
                            Forename = "Edward",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENdTvAL5YMFleToExelPXyc7nhMuamGTemNs0I0/fOP+AFKToNBBMiIyOFUuZd9Dew==",
                            PasswordHash = "AQAAAAIAAYagAAAAEA7E0hE7Gwm7wGPqpWvQmIVGxTced3h0kJxMqi9kTX59nVdhNc5uY9cULr5z8cUohg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f92b2346-bbac-4d86-b462-ac9b6f7aeb6c",
                            Surname = "Malus",
                            TwoFactorEnabled = false,
                            UserName = "emalus@example.com",
                            emailAddress = "emalus@example.com"
                        },
                        new
                        {
                            Id = "347ed484-a248-411b-8328-c6ed5ac64acb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdd65051-5694-4b4e-b99d-ed27637db9dd",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dmacready@example.com",
                            EmailConfirmed = false,
                            Forename = "Damon",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENdTvAL5YMFleToExelPXyc7nhMuamGTemNs0I0/fOP+AFKToNBBMiIyOFUuZd9Dew==",
                            PasswordHash = "AQAAAAIAAYagAAAAEEy8HhPxRXiIFwJqnwaGCkM6EbhH46PHYxxTJCVuFd8jK9+QQpvJtKBU8ZP6Gwwq/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb0b9a1e-fe86-42f7-a9b0-673d71ee5057",
                            Surname = "Macready",
                            TwoFactorEnabled = false,
                            UserName = "dmacready@example.com",
                            emailAddress = "dmacready@example.com"
                        },
                        new
                        {
                            Id = "7e421790-50b6-40e0-8fd0-310b884221e7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5a942b8-9f7e-471e-a9f2-4b129532388e",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jblaze@example.com",
                            EmailConfirmed = false,
                            Forename = "Johnny",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENdTvAL5YMFleToExelPXyc7nhMuamGTemNs0I0/fOP+AFKToNBBMiIyOFUuZd9Dew==",
                            PasswordHash = "AQAAAAIAAYagAAAAEO20eVwS6RyWLWr+atGL/b41d/ogfv8K4KPWGIloJQc/CFJhScqeXWVV6hYbfwTi4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c3cce728-12f0-4683-8606-02002e815915",
                            Surname = "Blaze",
                            TwoFactorEnabled = false,
                            UserName = "jblaze@example.com",
                            emailAddress = "jblaze@example.com"
                        },
                        new
                        {
                            Id = "59ae1058-6375-4260-938f-0dd978f24b86",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "906185ac-8090-4722-a5e0-331a1602cdf7",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "rfeld@example.com",
                            EmailConfirmed = false,
                            Forename = "Robin",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAENdTvAL5YMFleToExelPXyc7nhMuamGTemNs0I0/fOP+AFKToNBBMiIyOFUuZd9Dew==",
                            PasswordHash = "AQAAAAIAAYagAAAAEJL51w1IGUU/UviSGGVZXwG6pZJzo7/Bz6qVt6rPpGixfo6xmrV4UXah+IyLILv9BA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f61d95c-8aec-450c-a3fa-d9da66ad3c43",
                            Surname = "Feld",
                            TwoFactorEnabled = false,
                            UserName = "rfeld@example.com",
                            emailAddress = "rfeld@example.com"
                        });
                });

            modelBuilder.Entity("NewUserManagement.Shared.Models.LogDBEntry", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<int>("EditCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeletedUserEntry")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("LogId");

                    b.ToTable("LogEntries", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
