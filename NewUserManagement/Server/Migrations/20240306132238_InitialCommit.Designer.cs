// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewUserManagement.Server.Data;

#nullable disable

namespace NewUserManagement.Server.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240306132238_InitialCommit")]
    partial class InitialCommit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.16");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a1df7380-21c0-4883-9f13-2779a3bb41fe",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "08ff3603-95e6-426f-8a46-801a4e3834fc",
                            RoleId = "a1df7380-21c0-4883-9f13-2779a3bb41fe"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NewUserManagement.Shared.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Forename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "08ff3603-95e6-426f-8a46-801a4e3834fc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1746fa08-3d35-4ab2-af79-442306b68726",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            EmailAddress = "admin@example.com",
                            EmailConfirmed = false,
                            Forename = "Admin",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            Password = "",
                            PasswordHash = "AQAAAAIAAYagAAAAELMdtF0y1aS9L0QM95HCodhJIsYH3ziLkmh33r9nfYFa56qAKw4WZ1Do53CIfRVpgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8657d506-4a86-4b70-9170-39b646dfc88c",
                            Surname = "User",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "c70a253c-1aa6-4c19-a3ff-807a7087a5e7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45bedafc-901c-442b-9feb-498f9a01428d",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ploew@example.com",
                            EmailAddress = "ploew@example.com",
                            EmailConfirmed = false,
                            Forename = "Peter",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAELMdtF0y1aS9L0QM95HCodhJIsYH3ziLkmh33r9nfYFa56qAKw4WZ1Do53CIfRVpgA==",
                            PasswordHash = "AQAAAAIAAYagAAAAEHmzLGzU9yXURlaIrYqQK6amw+UfjLrAywPntOzDfRUqhP+OM6LgXZfuRDfnB+lSpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f0cafd3-9f34-4c83-8081-316326f82e51",
                            Surname = "Loew",
                            TwoFactorEnabled = false,
                            UserName = "ploew@example.com"
                        },
                        new
                        {
                            Id = "6eb12850-737b-4a09-a0ad-7e32bfd772b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62b58bf1-02d3-401b-9986-55dbb99a152b",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bfgates@example.com",
                            EmailAddress = "bfgates@example.com",
                            EmailConfirmed = false,
                            Forename = "Benjamin Franklin",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAELMdtF0y1aS9L0QM95HCodhJIsYH3ziLkmh33r9nfYFa56qAKw4WZ1Do53CIfRVpgA==",
                            PasswordHash = "AQAAAAIAAYagAAAAECWdriAw4Jl/yiEqxbq0jygITskwjxsA16YCM5OSgZ+wRS5+XKVSAyrOGnrILbiSXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34941b7a-1137-4e45-833a-24925a877f06",
                            Surname = "Gates",
                            TwoFactorEnabled = false,
                            UserName = "bfgates@example.com"
                        },
                        new
                        {
                            Id = "c37e9c41-90e0-44d5-8864-5b49a422bd18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03d1b0d2-4107-4f69-bf26-33d93d969bfa",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ctroy@example.com",
                            EmailAddress = "ctroy@example.com",
                            EmailConfirmed = false,
                            Forename = "Castor",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAELMdtF0y1aS9L0QM95HCodhJIsYH3ziLkmh33r9nfYFa56qAKw4WZ1Do53CIfRVpgA==",
                            PasswordHash = "AQAAAAIAAYagAAAAEG+fDCj7ikT5KrujJoUVGTE94r+FvZNBo2jar4+7hycLQjZ0JAvqbXEzuMRCJ1Becg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec0e6c8b-4c12-44d7-87a6-3dbbef111d11",
                            Surname = "Troy",
                            TwoFactorEnabled = false,
                            UserName = "ctroy@example.com"
                        },
                        new
                        {
                            Id = "d04896e4-d808-4fc3-9b81-9d4d9b656510",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cadf661c-3533-48a1-9608-bdc26c51e3ce",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mraines@example.com",
                            EmailAddress = "mraines@example.com",
                            EmailConfirmed = false,
                            Forename = "Memphis",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAELMdtF0y1aS9L0QM95HCodhJIsYH3ziLkmh33r9nfYFa56qAKw4WZ1Do53CIfRVpgA==",
                            PasswordHash = "AQAAAAIAAYagAAAAEAzdfdfivn3AjTk0C3oF+WVah+ejZrJD/zsm7BNHyxHgWg90lgYCCN63tnz71RMang==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e518df9-835b-469b-8b27-20fcf95f21b6",
                            Surname = "Raines",
                            TwoFactorEnabled = false,
                            UserName = "mraines@example.com"
                        },
                        new
                        {
                            Id = "a72a38e3-072f-4434-af6e-94e16b60db56",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e840608f-a318-44b0-98ad-460132c115cb",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sgodspeed@example.com",
                            EmailAddress = "sgodspeed@example.com",
                            EmailConfirmed = false,
                            Forename = "Stanley",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAELMdtF0y1aS9L0QM95HCodhJIsYH3ziLkmh33r9nfYFa56qAKw4WZ1Do53CIfRVpgA==",
                            PasswordHash = "AQAAAAIAAYagAAAAEAzVfhb1LTGKmHMhz5GAd+wYq5v7T+S1pO95rmA/GQt56K5IqucQnEE4uoSWsZ3HfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b22df38-1544-4d54-8064-00bf8cbf9644",
                            Surname = "Goodspeed",
                            TwoFactorEnabled = false,
                            UserName = "sgodspeed@example.com"
                        },
                        new
                        {
                            Id = "32823223-f1c8-4587-b0da-2791830f6a53",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d8eca55-e5ce-4bff-9ac4-0a29446f54bb",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "himcdunnough@example.com",
                            EmailAddress = "himcdunnough@example.com",
                            EmailConfirmed = false,
                            Forename = "H.I.",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAELMdtF0y1aS9L0QM95HCodhJIsYH3ziLkmh33r9nfYFa56qAKw4WZ1Do53CIfRVpgA==",
                            PasswordHash = "AQAAAAIAAYagAAAAEB1xZBxt8d94lpfssZyU3SanAiIzYkF0Le6E1YJTl6XHk1WkOP02RdrNZOtE6sKddg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9e1cb25-4d66-47e3-9762-f811f76df432",
                            Surname = "McDunnough",
                            TwoFactorEnabled = false,
                            UserName = "himcdunnough@example.com"
                        },
                        new
                        {
                            Id = "06b4d0b9-2fee-483f-af39-cc362deb60c0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60951d4d-675d-4f04-a845-2a51ed5ac200",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cpoe@example.com",
                            EmailAddress = "cpoe@example.com",
                            EmailConfirmed = false,
                            Forename = "Cameron",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAELMdtF0y1aS9L0QM95HCodhJIsYH3ziLkmh33r9nfYFa56qAKw4WZ1Do53CIfRVpgA==",
                            PasswordHash = "AQAAAAIAAYagAAAAEJZjf8OMfzzwP7LQwALdyCWQvCGiBNpvbRC/R7fXdq46N7My3p2gz9yLsRzuADBc9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef204f35-d8b0-4734-8bc8-da29d0b2849f",
                            Surname = "Poe",
                            TwoFactorEnabled = false,
                            UserName = "cpoe@example.com"
                        },
                        new
                        {
                            Id = "3618777a-9b4e-41c0-b328-2e7f64ff06b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c103890c-ed17-490d-808a-f7b8e4a83a93",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emalus@example.com",
                            EmailAddress = "emalus@example.com",
                            EmailConfirmed = false,
                            Forename = "Edward",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAELMdtF0y1aS9L0QM95HCodhJIsYH3ziLkmh33r9nfYFa56qAKw4WZ1Do53CIfRVpgA==",
                            PasswordHash = "AQAAAAIAAYagAAAAEFjXU795ke6IFVdhNdfSNoYyJ0M10QuaGx0PcitMzBiywk/tKjnk5SNCf9OBYyMVbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a9a11f9-be20-4e1d-91ec-6221a258e8f5",
                            Surname = "Malus",
                            TwoFactorEnabled = false,
                            UserName = "emalus@example.com"
                        },
                        new
                        {
                            Id = "944d4798-d321-4e0a-8c84-724309553f44",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb22a7a1-3628-4372-b29d-6ee647d22963",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dmacready@example.com",
                            EmailAddress = "dmacready@example.com",
                            EmailConfirmed = false,
                            Forename = "Damon",
                            IsActive = false,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAELMdtF0y1aS9L0QM95HCodhJIsYH3ziLkmh33r9nfYFa56qAKw4WZ1Do53CIfRVpgA==",
                            PasswordHash = "AQAAAAIAAYagAAAAEO1sLdMDBSd0ZjxWlnAX6yV0/DHtAFldF8Wt1CFcHQMNxSx6TpyEdxwnHa5CQX4dow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8cbb0e8-3b91-4fcf-8d9a-b98b7208ca7b",
                            Surname = "Macready",
                            TwoFactorEnabled = false,
                            UserName = "dmacready@example.com"
                        },
                        new
                        {
                            Id = "bb3a2af4-51f9-49ba-94a9-ec51bff7cbb7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bafc55f9-3e9b-45d2-a60f-0afeef253cfc",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jblaze@example.com",
                            EmailAddress = "jblaze@example.com",
                            EmailConfirmed = false,
                            Forename = "Johnny",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAELMdtF0y1aS9L0QM95HCodhJIsYH3ziLkmh33r9nfYFa56qAKw4WZ1Do53CIfRVpgA==",
                            PasswordHash = "AQAAAAIAAYagAAAAEI5fI4LXXLaNZHcylzNxj3+iDCKX5l69VSPmEea2FPLnvMbx0AjYQ/CSjdz0tskFCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbb1d3b7-6de2-4f2f-82b4-1e8f58f0c9ed",
                            Surname = "Blaze",
                            TwoFactorEnabled = false,
                            UserName = "jblaze@example.com"
                        },
                        new
                        {
                            Id = "138cb02e-a2ec-4470-bd94-f51bfc9d5012",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5acaf51c-ee1e-48d1-b7ab-b904d988e815",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "rfeld@example.com",
                            EmailAddress = "rfeld@example.com",
                            EmailConfirmed = false,
                            Forename = "Robin",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "AQAAAAIAAYagAAAAELMdtF0y1aS9L0QM95HCodhJIsYH3ziLkmh33r9nfYFa56qAKw4WZ1Do53CIfRVpgA==",
                            PasswordHash = "AQAAAAIAAYagAAAAEP2BaIf21zhskwSzMdkHyQ+oSx8lVtwTG4jdgN+mNFN7jAhJaNG4AlP5sE6kSbaAZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bedc2f36-9114-4b4d-bc28-67179afc9739",
                            Surname = "Feld",
                            TwoFactorEnabled = false,
                            UserName = "rfeld@example.com"
                        });
                });

            modelBuilder.Entity("NewUserManagement.Shared.Models.LogDBEntry", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<int>("EditCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeletedUserEntry")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("LogId");

                    b.ToTable("LogEntries", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NewUserManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
